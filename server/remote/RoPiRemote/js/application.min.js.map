{"version":3,"sources":["node_modules/browser-pack/_prelude.js","source/js/application.min.js","application.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","application","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"$","document","ready","Application","run","CameraControl","_this","socketio","robotIpEntry","cameraButton","connectButton","cameraControlsButton","cameraControlsOff","cameraControlsJoystick","cameraControlsSteppedJoystick","robotControls","RobotControls","cameraControls","CameraControls","init","bootstrapToggle","change","processToggleCamera","processRobotToggle","click","selectMode","FollowMeJoystick","SteppedJoystick","disableControlsButton","settingsButton","Settings","Current","show","Dashboard","getInstance","getToggleStatus","toggle","prop","getIsConnected","getIsCameraActive","getIsControlsActive","hide","enableControlsButton","connect","io","getBaseServerUrl","forceNew","on","msg","text","title","hideIcon","DashboardIcons","Engine","modifySpeed","hasOwnProperty","setLogoUrl","logoUrl","parkingControl","update","showIcon","emit","disconnect","processToggleControls","startCamera","stopCamera","startEngine","stopEngine","joystickRight","currentTilt","currentPan","step","isBusy","currentCameraControls","sendCameraCommand","command","console","log","RequestsHelper","put","processResult","data","pan","tilt","adjustTilt","offset","adjustPan","prototype","cameraControl","currentDistance","currentInterval","currentDirection","currentPanPercent","currentTiltPercent","joystickSize","distanceMax","Math","floor","centerX","centerY","steppedStart","nipplejs","create","maxNumberOfNipples","zone","getElementById","size","mode","position","left","top","color","evt","type","x","y","clearInterval","direction","panPercent","tiltPercent","angle","destroy","Parking","dummyVoltageValue","tempWarningLimit","warningTemperatureColor","steelseries","ColorDef","RED","normalTemperatureColor","RAITH","canvas","fabric","StaticCanvas","zoomFactor","originalWidth","originalHeight","isCameraVisible","cruiseControlSpeed","isMoving","setBackgroundColor","setHeight","setWidth","clockController","DashboardClockController","iconsController","DashboardIconsController","drawMiddleDisplay","drawCameraAndGauges","setInterval","isVisible","updateTime","cameraInterval","renderAll","onresize","resizeCanvas","tempInterval","callback","showAllIcons","leftGauge","setValue","rightGauge","setValueColor","miniGaugeLeft","miniGaugeRight","setTimeout","hideAllIcons","turnOn","ParkingSensors","Headlights","ParkingBrake","SeatBelt","showClockOrLogo","turnOff","setValueAnimated","voltageText","setText","setCruiseControlSpeed","speed","needMove","setThreshold","move","Tempomat","stop","TurnSignals","icon","img","onload","hideLogo","hideClock","cameraImage","setElement","width","height","onerror","src","getCameraUrl","memPercent","cpuPercent","cpuTemp","WaterTemperature","logo","remove","logoImage","Image","fromURL","image","ar","add","showClock","drawGauges","drawLeftGauge","Radial","gaugeType","GaugeType","TYPE3","minValue","maxValue","ledVisible","foregroundType","ForegroundType","frameDesign","FrameDesign","TILTED_BLACK","knobStyle","KnobStyle","SILVER","pointerType","PointerType","TYPE9","lcdDecimals","threshold","tickLabelOrientation","TickLabelOrientation","HORIZONTAL","section","area","titleString","unitString","lcdVisible","useOdometer","odometerParams","digits","backgroundColor","BackgroundColor","CARBON","leftGaugeImage","Text","fontSize","textAlign","fontFamily","fill","Linear","TYPE1","backgroundVisible","frameVisible","thresholdVisible","niceScale","foregroundVisible","miniGaugeLeftImage","miniGaugeRightImage","drawRightGauge","RadialBargraph","TYPE2","valueColor","fractionalScaleDecimals","useValueGradient","rightGaugeImage","degreesSymbol","Line","stroke","strokeWidth","zoomIt","factor","getHeight","getWidth","backgroundImage","bi","objects","getObjects","scaleX","scaleY","top_1","tempScaleX","tempScaleY","tempLeft","tempTop","setCoords","calcOffset","clientWidth","innerWidth","instance","visible","clockGaugeImage","Clock","TYPE4","secondPointerVisible","BRUSHED_STAINLESS","value","TYPE5","today","Date","h","checkTime","getHours","m","getMinutes","clockText","icons","target","undefined","id","path","FrontAssist","LaneAssist","loadSVGFromURL","result","PathGroup","iconPath","colorOff","color1","color2","color3","color4","colorLeftLine","colorRightLine","isOff","circle1","circle2","circle3","circle4","right","lineLeft","lineRight","dist","miniDisplay","d","drawMiniDisplay","startAngle","endAngle","allowTouchScrolling","setZoom","Circle","radius","selectable","body","Rect","wleft","wright","Group","lockScalingX","lockScalingY","lockScalingFlip","hasBorders","hasControls","miniDisplayImage","DisplaySingle","valuesNumeric","unitStringVisible","callbackSuccess","callbackError","ajax","url","getBaseAPIUrl","success","error","joystickLeft","accButton","brakeButton","currentSpeed","showDirectionJoystick","currentDirectionAngle","distance","degree","robotIpCookieName","robotIP","BootstrapDialog","message","load","closable","closeByBackdrop","closeByKeyboard","onshow","dialogRef","onshown","val","getRobotIp","executeShutdown","executeReboot","executeStop","buttons","label","action","dialogItself","close","onhide","storeRobotIp","checkRobotIp","Cookies","get","location","hostname","set","ip","confirm","TYPE_DANGER","btnOKLabel","btnOKClass","TYPE_WARNING"],"mappings":"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","file":"application.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","$(document).ready(function () {\n    new Application().run();\n});\nvar Application = (function () {\n    function Application() {\n        var _this = this;\n        this.socketio = null;\n        this.robotIpEntry = null;\n        this.cameraButton = null;\n        this.connectButton = null;\n        this.cameraControlsButton = null;\n        this.cameraControlsOff = null;\n        this.cameraControlsJoystick = null;\n        this.cameraControlsSteppedJoystick = null;\n        this.robotControls = new RobotControls();\n        this.cameraControls = new CameraControls();\n        this.run = function () {\n            _this.robotControls.init();\n            _this.cameraControls.init();\n            _this.cameraButton = $(\"#cameraButton\");\n            _this.cameraButton.bootstrapToggle();\n            _this.cameraButton.change(function () {\n                _this.processToggleCamera();\n            });\n            _this.connectButton = $(\"#connectButton\");\n            _this.connectButton.bootstrapToggle();\n            _this.connectButton.change(function () {\n                _this.processRobotToggle();\n            });\n            _this.cameraControlsButton = $(\"#controlsButtonOptions\");\n            _this.cameraControlsJoystick = $(\"#controlsJoystick\").click(function () {\n                _this.cameraControls.selectMode(CameraControl.FollowMeJoystick);\n            });\n            _this.cameraControlsSteppedJoystick = $(\"#controlsSteppedJoystick\").click(function () {\n                _this.cameraControls.selectMode(CameraControl.SteppedJoystick);\n            });\n            _this.disableControlsButton();\n            var settingsButton = $(\"#settingsButton\");\n            settingsButton.click(function () {\n                Settings.Current.show();\n            });\n            Dashboard.getInstance().show();\n        };\n        this.getToggleStatus = function (toggle) { return (toggle != null && toggle.prop(\"checked\")); };\n        this.getIsConnected = function () { return _this.getToggleStatus(_this.connectButton); };\n        this.getIsCameraActive = function () { return _this.getToggleStatus(_this.cameraButton); };\n        this.getIsControlsActive = function () { return true; };\n        this.disableControlsButton = function () {\n            _this.cameraControls.hide();\n            _this.cameraControlsButton.prop(\"disabled\", true);\n        };\n        this.enableControlsButton = function () {\n            _this.cameraControlsButton.prop(\"disabled\", false);\n            _this.cameraControls.show();\n        };\n        this.connect = function () {\n            _this.socketio = io.connect(Settings.Current.getBaseServerUrl() + \":80/\", { 'forceNew': true });\n            _this.socketio.on(\"connected\", function (msg) {\n                $(\"#badge\").text(msg.title);\n                Dashboard.getInstance().hideIcon(DashboardIcons.Engine);\n                _this.robotControls.modifySpeed(0);\n                if (msg.hasOwnProperty(\"logoUrl\")) {\n                    Dashboard.getInstance().setLogoUrl(msg.logoUrl);\n                }\n            });\n            _this.socketio.on(\"disconnected\", function (msg) {\n                $(\"#badge\").text('offline');\n                _this.connectButton.bootstrapToggle(\"off\");\n                _this.cameraButton.bootstrapToggle(\"off\");\n            });\n            _this.socketio.on(\"parking\", function (msg) {\n                Dashboard.getInstance().parkingControl.update(msg);\n            });\n            _this.socketio.on(\"sysinfo\", function (msg) {\n                Dashboard.getInstance().update(msg);\n            });\n            _this.socketio.on(\"error\", function (msg) {\n                Dashboard.getInstance().showIcon(DashboardIcons.Engine);\n            });\n            _this.socketio.on(\"reconnect_error\", function (msg) {\n                Dashboard.getInstance().showIcon(DashboardIcons.Engine);\n            });\n            _this.socketio.emit(\"connect\");\n        };\n        this.disconnect = function () {\n            if (_this.socketio !== null) {\n                _this.socketio.disconnect();\n            }\n        };\n        this.processToggleControls = function () {\n            if (!_this.getIsCameraActive())\n                return;\n        };\n        this.processToggleCamera = function () {\n            if (_this.getIsCameraActive()) {\n                Dashboard.getInstance().startCamera();\n                _this.enableControlsButton();\n            }\n            else {\n                Dashboard.getInstance().stopCamera();\n                if (!_this.getIsConnected()) {\n                    _this.cameraControls.hide();\n                    _this.disableControlsButton();\n                }\n            }\n        };\n        this.processRobotToggle = function () {\n            if (_this.getIsConnected()) {\n                Dashboard.getInstance().startEngine(function () {\n                    _this.connect();\n                    _this.robotControls.show();\n                    if (!_this.getIsCameraActive()) {\n                        _this.cameraButton.bootstrapToggle(\"toggle\");\n                    }\n                    _this.enableControlsButton();\n                });\n            }\n            else {\n                Dashboard.getInstance().stopEngine(function () {\n                    $(\"#badge\").text('offline');\n                    _this.robotControls.hide();\n                    _this.disconnect();\n                    if (!_this.getIsCameraActive()) {\n                        _this.disableControlsButton();\n                        _this.cameraControls.hide();\n                    }\n                });\n            }\n        };\n    }\n    return Application;\n}());\nvar CameraControl;\n(function (CameraControl) {\n    CameraControl[CameraControl[\"SteppedJoystick\"] = 0] = \"SteppedJoystick\";\n    CameraControl[CameraControl[\"FollowMeJoystick\"] = 1] = \"FollowMeJoystick\";\n})(CameraControl || (CameraControl = {}));\nvar CameraControls = (function () {\n    function CameraControls() {\n        var _this = this;\n        this.joystickRight = null;\n        this.currentTilt = 95;\n        this.currentPan = 90;\n        this.step = 10;\n        this.isBusy = false;\n        this.currentCameraControls = CameraControl.SteppedJoystick;\n        this.sendCameraCommand = function (command) {\n            if (_this.isBusy && command !== \"center\") {\n                console.log(\"Skipped request...\");\n                return;\n            }\n            _this.isBusy = true;\n            RequestsHelper.Current.put(\"servos/\" + command, _this.processResult, function () { return _this.isBusy = false; });\n        };\n        this.processResult = function (data) {\n            var pan = data[\"pan\"];\n            var tilt = data[\"tilt\"];\n            if (pan != null && pan !== -1) {\n                _this.currentPan = pan;\n            }\n            if (tilt != null && tilt !== -1) {\n                _this.currentTilt = data[\"tilt\"];\n            }\n            _this.isBusy = false;\n        };\n        this.adjustTilt = function (offset) { return (_this.currentTilt + offset); };\n        this.adjustPan = function (offset) { return (_this.currentPan + offset); };\n    }\n    CameraControls.prototype.init = function () {\n    };\n    CameraControls.prototype.selectMode = function (cameraControl) {\n        this.currentCameraControls = cameraControl;\n    };\n    CameraControls.prototype.show = function () {\n        var _this = this;\n        var currentDirection = null;\n        var currentDistance;\n        var currentPanPercent = 0;\n        var currentTiltPercent = 0;\n        var joystickSize = 120;\n        var distanceMax = Math.floor(joystickSize / 2);\n        var centerX = 0;\n        var centerY = 0;\n        var currentInterval;\n        var steppedStart = false;\n        this.hide();\n        this.currentCameraControls = CameraControl.SteppedJoystick;\n        if (this.joystickRight != null)\n            return;\n        this.joystickRight = nipplejs.create({\n            maxNumberOfNipples: 1,\n            zone: document.getElementById(\"jRight\"),\n            size: joystickSize,\n            mode: \"dynamic\",\n            position: { left: \"50%\", top: \"50%\" },\n            color: \"blue\"\n        }).on(\"start end\", function (evt, data) {\n            if (_this.currentCameraControls === CameraControl.FollowMeJoystick) {\n                if (evt.type === \"start\") {\n                    centerX = data.position.x;\n                    centerY = data.position.y;\n                    console.log(\"centerX:\" + centerX + \"  centerY:\" + centerY);\n                }\n                else {\n                    centerX = 0;\n                    centerY = 0;\n                    _this.sendCameraCommand(\"center\");\n                }\n                currentDirection = null;\n                currentDistance = 0;\n            }\n            else if (_this.currentCameraControls === CameraControl.SteppedJoystick) {\n                clearInterval(currentInterval);\n                if (evt.type === \"start\") {\n                    steppedStart = true;\n                }\n                else {\n                    _this.sendCameraCommand(\"move/stop\");\n                    if (steppedStart) {\n                        steppedStart = false;\n                        _this.sendCameraCommand(\"center\");\n                    }\n                }\n            }\n        }).on(\"move\", function (evt, data) {\n            if (_this.currentCameraControls === CameraControl.FollowMeJoystick) {\n                if (data == null || data.direction === null || data.position === null)\n                    return;\n                var panPercent = -Math.floor(((data.position.x - centerX) / distanceMax) * 100);\n                var tiltPercent = Math.floor(((data.position.y - centerY) / distanceMax) * 100);\n                if (panPercent > 100 || panPercent < -100 || tiltPercent > 100 || tiltPercent < -100) {\n                    return;\n                }\n                if (panPercent % 2 === 0 || tiltPercent % 2 === 0) {\n                    if (currentPanPercent !== panPercent || currentTiltPercent !== tiltPercent) {\n                        currentPanPercent = panPercent;\n                        currentTiltPercent = tiltPercent;\n                        _this.sendCameraCommand(\"percent/\" + panPercent + \"/\" + tiltPercent);\n                    }\n                }\n            }\n        }).on(\"dir\", function (evt, data) {\n            if (_this.currentCameraControls === CameraControl.SteppedJoystick) {\n                steppedStart = false;\n                var direction = data.direction.angle;\n                console.log(direction);\n                if (currentDirection === direction) {\n                    return;\n                }\n                currentDirection = direction;\n                _this.sendCameraCommand(\"move/\" + currentDirection);\n            }\n        });\n    };\n    CameraControls.prototype.hide = function () {\n        if (this.joystickRight != null) {\n            this.joystickRight.destroy();\n            this.joystickRight = null;\n        }\n        this.currentCameraControls = CameraControl.SteppedJoystick;\n    };\n    return CameraControls;\n}());\nvar Dashboard = (function () {\n    function Dashboard() {\n        var _this = this;\n        this.parkingControl = new Parking();\n        this.dummyVoltageValue = \"22.5 °C\";\n        this.tempWarningLimit = 60;\n        this.warningTemperatureColor = steelseries.ColorDef.RED;\n        this.normalTemperatureColor = steelseries.ColorDef.RAITH;\n        this.logoUrl = null;\n        this.canvas = new fabric.StaticCanvas(\"dashboard\");\n        this.zoomFactor = 1;\n        this.originalWidth = 1408;\n        this.originalHeight = 513;\n        this.isCameraVisible = false;\n        this.cruiseControlSpeed = 0;\n        this.isMoving = false;\n        this.show = function () {\n            _this.canvas.setBackgroundColor(\"black\", function () { });\n            _this.canvas.setHeight(_this.originalHeight);\n            _this.canvas.setWidth(_this.originalWidth);\n            _this.clockController = new DashboardClockController(_this.canvas);\n            _this.iconsController = new DashboardIconsController(_this.canvas);\n            _this.parkingControl.iconsController = _this.iconsController;\n            _this.drawMiddleDisplay();\n            _this.drawCameraAndGauges();\n            setInterval(function () {\n                if (_this.clockController.isVisible()) {\n                    _this.clockController.updateTime();\n                    if (_this.cameraInterval == null) {\n                        _this.canvas.renderAll();\n                    }\n                }\n            }, 1000);\n            window.onresize = _this.resizeCanvas;\n            _this.tempInterval = setInterval(function () {\n                clearInterval(_this.tempInterval);\n                _this.resizeCanvas();\n            }, 500);\n        };\n        this.startEngine = function (callback) {\n            _this.iconsController.showAllIcons();\n            _this.leftGauge.setValue(100);\n            _this.rightGauge.setValue(90);\n            _this.rightGauge.setValueColor(_this.normalTemperatureColor);\n            _this.miniGaugeLeft.setValue(100);\n            _this.miniGaugeRight.setValue(100);\n            setTimeout(function () {\n                _this.iconsController.hideAllIcons();\n                _this.leftGauge.setValue(0);\n                _this.rightGauge.setValue(0);\n                _this.miniGaugeLeft.setValue(0);\n                _this.miniGaugeRight.setValue(0);\n                _this.parkingControl.turnOn();\n                _this.showIcon(DashboardIcons.ParkingSensors);\n                _this.showIcon(DashboardIcons.Headlights);\n                _this.showIcon(DashboardIcons.ParkingBrake);\n                _this.showIcon(DashboardIcons.SeatBelt);\n                if (callback != null) {\n                    callback();\n                }\n            }, 1500);\n        };\n        this.stopEngine = function (callback) {\n            _this.setLogoUrl(null);\n            _this.showClockOrLogo();\n            _this.parkingControl.turnOff();\n            _this.miniGaugeLeft.setValue(0);\n            _this.miniGaugeRight.setValue(0);\n            _this.rightGauge.setValueAnimated(0);\n            _this.rightGauge.setValueColor(_this.normalTemperatureColor);\n            _this.iconsController.hideAllIcons();\n            _this.voltageText.setText(_this.dummyVoltageValue);\n            if (callback != null) {\n                callback();\n            }\n        };\n        this.setCruiseControlSpeed = function (speed) {\n            if (_this.leftGauge != null) {\n                var needMove = false;\n                if (_this.cruiseControlSpeed !== speed && _this.isMoving) {\n                    needMove = true;\n                }\n                _this.cruiseControlSpeed = speed;\n                _this.leftGauge.setThreshold(_this.cruiseControlSpeed);\n                if (needMove) {\n                    _this.move();\n                }\n            }\n            if (_this.cruiseControlSpeed === 0) {\n                _this.hideIcon(DashboardIcons.Tempomat);\n            }\n            else {\n                _this.showIcon(DashboardIcons.Tempomat);\n            }\n        };\n        this.move = function () {\n            if (_this.leftGauge != null && _this.cruiseControlSpeed != null && !_this.isMoving) {\n                _this.hideIcon(DashboardIcons.ParkingBrake);\n                _this.isMoving = true;\n                _this.leftGauge.setValueAnimated(_this.cruiseControlSpeed);\n            }\n        };\n        this.stop = function () {\n            if (_this.leftGauge != null) {\n                _this.isMoving = false;\n                _this.leftGauge.setValueAnimated(0);\n                _this.showIcon(DashboardIcons.ParkingBrake);\n                _this.hideIcon(DashboardIcons.TurnSignals);\n            }\n        };\n        this.showIcon = function (icon) {\n            _this.iconsController.showIcon(icon);\n        };\n        this.hideIcon = function (icon) {\n            _this.iconsController.hideIcon(icon);\n        };\n        this.startCamera = function () {\n            var img = document.getElementById(\"camera\");\n            img.onload = function () {\n                _this.hideLogo();\n                _this.hideClock();\n                _this.cameraImage.setElement(img);\n                _this.cameraImage.width = 500;\n                _this.cameraImage.height = 375;\n            };\n            img.onerror = function () {\n                _this.showClockOrLogo();\n            };\n            img.src = Settings.Current.getCameraUrl();\n            _this.cameraInterval = setInterval(function () {\n                _this.canvas.renderAll();\n            }, 250);\n        };\n        this.stopCamera = function () {\n            if (_this.cameraInterval != null) {\n                clearInterval(_this.cameraInterval);\n                _this.cameraInterval = null;\n            }\n            var img = document.getElementById(\"camera\");\n            img.onerror = function () {\n                _this.showClockOrLogo();\n            };\n            img.src = \"http://\";\n        };\n        this.update = function (msg) {\n            if (_this.canvas != null) {\n                var memPercent = msg[\"mp\"];\n                var cpuPercent = msg[\"cp\"];\n                var cpuTemp = msg[\"ct\"];\n                _this.rightGauge.setValueAnimated(cpuTemp);\n                _this.miniGaugeLeft.setValue(cpuPercent);\n                _this.miniGaugeRight.setValue(memPercent);\n                if (cpuTemp > _this.tempWarningLimit) {\n                    _this.iconsController.showIcon(DashboardIcons.WaterTemperature);\n                    _this.rightGauge.setValueColor(_this.warningTemperatureColor);\n                }\n                else {\n                    _this.iconsController.hideIcon(DashboardIcons.WaterTemperature);\n                    _this.rightGauge.setValueColor(_this.normalTemperatureColor);\n                }\n                if (msg[\"v\"] !== \"0\") {\n                    _this.voltageText.setText(msg[\"v\"] + \" V\");\n                }\n                else {\n                    _this.voltageText.setText(_this.dummyVoltageValue);\n                }\n            }\n        };\n        this.setLogoUrl = function (logo) {\n            _this.logoUrl = logo;\n        };\n        this.hideLogo = function () {\n            _this.canvas.remove(_this.logoImage);\n            _this.canvas.renderAll();\n        };\n        this.hideClock = function () {\n            _this.clockController.hideClock();\n        };\n        this.showClockOrLogo = function () {\n            _this.clockController.hideClock();\n            if (_this.logoUrl !== null) {\n                fabric.Image.fromURL(_this.logoUrl, function (image) {\n                    _this.logoImage = image;\n                    var ar = image.height / image.width;\n                    image.width = 200 * _this.zoomFactor;\n                    image.left = 705 * _this.zoomFactor - image.width / 2;\n                    image.height = image.width * ar;\n                    image.top = 220 * _this.zoomFactor - image.height / 2;\n                    _this.canvas.add(image);\n                    _this.canvas.renderAll();\n                });\n            }\n            else {\n                _this.hideLogo();\n                _this.clockController.showClock();\n            }\n        };\n        this.drawCameraAndGauges = function () {\n            fabric.Image.fromURL(\"http://\", function (image) {\n                _this.cameraImage = image;\n                var ar = image.height / image.width;\n                image.left = 455;\n                image.top = 60;\n                _this.canvas.add(image);\n                _this.drawGauges();\n            });\n            _this.showClockOrLogo();\n        };\n        this.drawLeftGauge = function () {\n            _this.leftGauge = new steelseries.Radial(\"gLeft\", {\n                gaugeType: steelseries.GaugeType.TYPE3,\n                minValue: 0,\n                maxValue: 100,\n                size: 510,\n                ledVisible: false,\n                foregroundType: steelseries.ForegroundType.TYPE3,\n                frameDesign: steelseries.FrameDesign.TILTED_BLACK,\n                knobStyle: steelseries.KnobStyle.SILVER,\n                pointerType: steelseries.PointerType.TYPE9,\n                lcdDecimals: 0,\n                threshold: 0,\n                tickLabelOrientation: steelseries.TickLabelOrientation.HORIZONTAL,\n                section: null,\n                area: null,\n                titleString: \"Speed\",\n                unitString: \"%\",\n                lcdVisible: true,\n                useOdometer: true,\n                odometerParams: { digits: 5 },\n                backgroundColor: steelseries.BackgroundColor.CARBON\n            });\n            var leftGaugeImage = new fabric.Image(document.getElementById(\"gLeft\"), {\n                left: 0,\n                top: 0,\n                width: 510,\n                height: 510\n            });\n            _this.canvas.add(leftGaugeImage);\n            _this.voltageText = new fabric.Text(_this.dummyVoltageValue, {\n                fontSize: 28,\n                textAlign: \"center\",\n                left: 890,\n                top: 25,\n                fontFamily: \"Arial\",\n                fill: \"white\"\n            });\n            _this.canvas.add(_this.voltageText);\n            _this.miniGaugeLeft = new steelseries.Linear(\"gMiniLeft\", {\n                gaugeType: steelseries.GaugeType.TYPE1,\n                backgroundVisible: false,\n                frameVisible: false,\n                minValue: 0,\n                maxValue: 100,\n                ledVisible: false,\n                thresholdVisible: false,\n                lcdVisible: false,\n                niceScale: false,\n                foregroundVisible: false,\n            });\n            var miniGaugeLeftImage = new fabric.Image(document.getElementById(\"gMiniLeft\"), {\n                left: 405,\n                top: 400,\n                width: 340,\n                height: 80\n            });\n            _this.canvas.add(miniGaugeLeftImage);\n            _this.miniGaugeRight = new steelseries.Linear(\"gMiniRight\", {\n                gaugeType: steelseries.GaugeType.TYPE1,\n                backgroundVisible: false,\n                frameVisible: false,\n                minValue: 0,\n                maxValue: 100,\n                ledVisible: false,\n                lcdVisible: false,\n                niceScale: true,\n                thresholdVisible: false,\n                foregroundVisible: false,\n            });\n            var miniGaugeRightImage = new fabric.Image(document.getElementById(\"gMiniRight\"), {\n                left: 660,\n                top: 400,\n                width: 340,\n                height: 80\n            });\n            _this.canvas.add(miniGaugeRightImage);\n        };\n        this.drawRightGauge = function () {\n            _this.rightGauge = new steelseries.RadialBargraph(\"gRight\", {\n                gaugeType: steelseries.GaugeType.TYPE2,\n                minValue: 10,\n                maxValue: 90,\n                size: 510,\n                valueColor: _this.normalTemperatureColor,\n                tickLabelOrientation: steelseries.TickLabelOrientation.HORIZONTAL,\n                foregroundType: steelseries.ForegroundType.TYPE3,\n                frameDesign: steelseries.FrameDesign.TILTED_BLACK,\n                ledVisible: false,\n                niceScale: false,\n                fractionalScaleDecimals: false,\n                useValueGradient: true,\n                section: null,\n                area: null,\n                lcdVisible: false,\n                backgroundColor: steelseries.BackgroundColor.CARBON\n            });\n            var rightGaugeImage = new fabric.Image(document.getElementById(\"gRight\"), {\n                left: 898,\n                top: 0,\n                width: 510,\n                height: 510\n            });\n            _this.canvas.add(rightGaugeImage);\n            var degreesSymbol = new fabric.Text(\"°C\", {\n                fontSize: 28,\n                textAlign: \"center\",\n                left: 1317,\n                top: 270,\n                fontFamily: \"Arial\",\n                fill: \"white\"\n            });\n            _this.canvas.add(degreesSymbol);\n        };\n        this.drawGauges = function () {\n            _this.drawLeftGauge();\n            _this.drawRightGauge();\n            _this.parkingControl.init(_this.canvas);\n        };\n        this.drawMiddleDisplay = function () {\n            _this.canvas.add(new fabric.Line([400, 59, 1000, 59], {\n                stroke: \"gray\",\n                strokeWidth: 2\n            }));\n            _this.canvas.add(new fabric.Line([400, 436, 1000, 436], {\n                stroke: \"gray\",\n                strokeWidth: 2\n            }));\n        };\n        this.zoomIt = function (factor) {\n            _this.canvas.setHeight(_this.canvas.getHeight() * factor);\n            _this.canvas.setWidth(_this.canvas.getWidth() * factor);\n            if (_this.canvas.backgroundImage) {\n                var bi = _this.canvas.backgroundImage;\n                bi.width = bi.width * factor;\n                bi.height = bi.height * factor;\n            }\n            var objects = _this.canvas.getObjects();\n            for (var i in objects) {\n                var scaleX = objects[i].scaleX;\n                var scaleY = objects[i].scaleY;\n                var left = objects[i].left;\n                var top_1 = objects[i].top;\n                var tempScaleX = scaleX * factor;\n                var tempScaleY = scaleY * factor;\n                var tempLeft = left * factor;\n                var tempTop = top_1 * factor;\n                objects[i].scaleX = tempScaleX;\n                objects[i].scaleY = tempScaleY;\n                objects[i].left = tempLeft;\n                objects[i].top = tempTop;\n                objects[i].setCoords();\n            }\n            _this.canvas.renderAll();\n            _this.canvas.calcOffset();\n        };\n        this.resizeCanvas = function () {\n            var clientWidth = window.innerWidth;\n            _this.zoomFactor = clientWidth / _this.canvas.getWidth();\n            _this.zoomIt(_this.zoomFactor);\n        };\n        if (Dashboard.instance) {\n            throw new Error(\"Error - use Dashboard.getInstance()\");\n        }\n    }\n    Dashboard.getInstance = function () {\n        Dashboard.instance = Dashboard.instance || new Dashboard();\n        return Dashboard.instance;\n    };\n    return Dashboard;\n}());\nvar DashboardClockController = (function () {\n    function DashboardClockController(canvas) {\n        var _this = this;\n        this.isVisible = function () {\n            return _this.visible;\n        };\n        this.hideClock = function () {\n            _this.canvas.remove(_this.clockGaugeImage);\n            _this.canvas.renderAll();\n            _this.visible = false;\n        };\n        this.showClock = function () {\n            _this.hideClock();\n            new steelseries.Clock(\"gClock\", {\n                gaugeType: steelseries.GaugeType.TYPE4,\n                size: 170,\n                secondPointerVisible: true,\n                backgroundVisible: true,\n                backgroundColor: steelseries.BackgroundColor.BRUSHED_STAINLESS,\n                frameVisible: false,\n                frameDesign: steelseries.FrameDesign.TILTED_BLACK,\n                minValue: 20,\n                maxValue: 80,\n                value: 45,\n                niceScale: true,\n                pointerType: steelseries.PointerType.TYPE5,\n            });\n            var factor = Dashboard.getInstance().zoomFactor;\n            _this.clockGaugeImage = new fabric.Image(document.getElementById(\"gClock\"), {\n                left: 579 * factor,\n                top: 120 * factor,\n                width: 250 * factor,\n                height: 250 * factor\n            });\n            _this.canvas.add(_this.clockGaugeImage);\n            _this.canvas.renderAll();\n            _this.visible = true;\n        };\n        this.updateTime = function () {\n            var today = new Date();\n            var h = _this.checkTime(today.getHours());\n            var m = _this.checkTime(today.getMinutes());\n            _this.clockText.setText(h + \":\" + m);\n        };\n        this.checkTime = function (i) {\n            if (i < 10) {\n                i = \"0\" + i;\n            }\n            ;\n            return i;\n        };\n        this.canvas = canvas;\n        this.clockText = new fabric.Text(\"21:45\", {\n            fontSize: 28,\n            textAlign: \"center\",\n            left: 420,\n            top: 25,\n            fontFamily: \"Arial\",\n            fill: \"white\"\n        });\n        this.canvas.add(this.clockText);\n        this.updateTime();\n    }\n    return DashboardClockController;\n}());\nvar DashboardIcons;\n(function (DashboardIcons) {\n    DashboardIcons[DashboardIcons[\"SeatBelt\"] = 0] = \"SeatBelt\";\n    DashboardIcons[DashboardIcons[\"Tempomat\"] = 1] = \"Tempomat\";\n    DashboardIcons[DashboardIcons[\"FrontAssist\"] = 2] = \"FrontAssist\";\n    DashboardIcons[DashboardIcons[\"Engine\"] = 3] = \"Engine\";\n    DashboardIcons[DashboardIcons[\"Headlights\"] = 4] = \"Headlights\";\n    DashboardIcons[DashboardIcons[\"LaneAssist\"] = 5] = \"LaneAssist\";\n    DashboardIcons[DashboardIcons[\"ParkingBrake\"] = 6] = \"ParkingBrake\";\n    DashboardIcons[DashboardIcons[\"ParkingSensors\"] = 7] = \"ParkingSensors\";\n    DashboardIcons[DashboardIcons[\"WaterTemperature\"] = 8] = \"WaterTemperature\";\n    DashboardIcons[DashboardIcons[\"TurnSignals\"] = 9] = \"TurnSignals\";\n})(DashboardIcons || (DashboardIcons = {}));\nvar DashboardIconsController = (function () {\n    function DashboardIconsController(canvas) {\n        this.icons = {};\n        this.canvas = canvas;\n    }\n    DashboardIconsController.prototype.showIcon = function (target) {\n        var _this = this;\n        var icon = this.icons[target];\n        if (icon != undefined && icon.isVisible) {\n            return;\n        }\n        else {\n            this.icons[target] = { id: target, isVisible: true };\n        }\n        var path = null;\n        var left = -1;\n        var top = -1;\n        switch (target) {\n            case DashboardIcons.Engine:\n                path = \"/images/Engine.svg\";\n                left = 675;\n                top = 445;\n                break;\n            case DashboardIcons.FrontAssist:\n                path = \"/images/Frontassist.svg\";\n                left = 1230;\n                top = 300;\n                break;\n            case DashboardIcons.Headlights:\n                path = \"/images/Headlights.svg\";\n                left = 615;\n                top = 10;\n                break;\n            case DashboardIcons.LaneAssist:\n                path = \"/images/Laneassist.svg\";\n                left = 525;\n                top = 445;\n                break;\n            case DashboardIcons.ParkingBrake:\n                path = \"/images/Parkingbrake.svg\";\n                left = 840;\n                top = 445;\n                break;\n            case DashboardIcons.ParkingSensors:\n                path = \"/images/Parkingsensors.svg\";\n                left = 1030;\n                top = 300;\n                break;\n            case DashboardIcons.SeatBelt:\n                path = \"/images/Seatbelt.svg\";\n                left = 900;\n                top = 445;\n                break;\n            case DashboardIcons.Tempomat:\n                path = \"/images/Tempomat.svg\";\n                left = 465;\n                top = 445;\n                break;\n            case DashboardIcons.TurnSignals:\n                path = \"/images/Turnsignal.svg\";\n                left = 675;\n                top = 10;\n                break;\n            case DashboardIcons.WaterTemperature:\n                path = \"/images/Temperature.svg\";\n                left = 960;\n                top = 280;\n                break;\n        }\n        if (path !== null && left !== -1 && top !== -1) {\n            fabric.loadSVGFromURL(path, function (objects) {\n                var factor = Dashboard.getInstance().zoomFactor;\n                var result = new fabric.PathGroup(objects, {\n                    left: left * factor,\n                    top: top * factor\n                });\n                result.scaleX = 0.7 * factor;\n                result.scaleY = 0.7 * factor;\n                _this.canvas.add(result);\n                _this.icons[target] = { id: target, iconPath: result, isVisible: true };\n            });\n        }\n    };\n    DashboardIconsController.prototype.hideIcon = function (target) {\n        var icon = this.icons[target];\n        if (icon != undefined && icon.isVisible) {\n            icon.isVisible = false;\n            this.canvas.remove(icon.iconPath);\n            icon.iconPath = null;\n        }\n    };\n    DashboardIconsController.prototype.showAllIcons = function () {\n        this.showIcon(DashboardIcons.Engine);\n        this.showIcon(DashboardIcons.FrontAssist);\n        this.showIcon(DashboardIcons.Headlights);\n        this.showIcon(DashboardIcons.LaneAssist);\n        this.showIcon(DashboardIcons.ParkingBrake);\n        this.showIcon(DashboardIcons.ParkingSensors);\n        this.showIcon(DashboardIcons.SeatBelt);\n        this.showIcon(DashboardIcons.Tempomat);\n        this.showIcon(DashboardIcons.TurnSignals);\n        this.showIcon(DashboardIcons.WaterTemperature);\n    };\n    DashboardIconsController.prototype.hideAllIcons = function () {\n        this.hideIcon(DashboardIcons.Engine);\n        this.hideIcon(DashboardIcons.FrontAssist);\n        this.hideIcon(DashboardIcons.Headlights);\n        this.hideIcon(DashboardIcons.LaneAssist);\n        this.hideIcon(DashboardIcons.ParkingBrake);\n        this.hideIcon(DashboardIcons.ParkingSensors);\n        this.hideIcon(DashboardIcons.SeatBelt);\n        this.hideIcon(DashboardIcons.Tempomat);\n        this.hideIcon(DashboardIcons.TurnSignals);\n        this.hideIcon(DashboardIcons.WaterTemperature);\n    };\n    return DashboardIconsController;\n}());\nvar Parking = (function () {\n    function Parking() {\n        var _this = this;\n        this.colorOff = \"lightGray\";\n        this.color1 = \"yellow\";\n        this.color2 = \"orange\";\n        this.color3 = \"orangered\";\n        this.color4 = \"red\";\n        this.colorLeftLine = \"red\";\n        this.colorRightLine = \"green\";\n        this.isOff = true;\n        this.circle1 = null;\n        this.circle2 = null;\n        this.circle3 = null;\n        this.circle4 = null;\n        this.left = null;\n        this.right = null;\n        this.lineLeft = null;\n        this.lineRight = null;\n        this.update = function (msg) {\n            if (_this.canvas != null) {\n                _this.circle1.stroke = _this.colorOff;\n                _this.circle2.stroke = _this.colorOff;\n                _this.circle3.stroke = _this.colorOff;\n                _this.circle4.stroke = _this.colorOff;\n                _this.left.stroke = _this.colorOff;\n                _this.right.stroke = _this.colorOff;\n                _this.lineLeft.fill = _this.colorOff;\n                _this.lineRight.fill = _this.colorOff;\n                var dist = msg[\"d\"];\n                if (!_this.isOff) {\n                    _this.miniDisplay.setValue(dist);\n                }\n                if (dist < 50 && dist >= 30) {\n                    _this.circle1.stroke = _this.color1;\n                }\n                if (dist < 30 && dist >= 20) {\n                    _this.circle2.stroke = _this.color2;\n                }\n                if (dist < 20 && dist >= 10) {\n                    _this.circle3.stroke = _this.color3;\n                }\n                if (dist < 10 || msg[\"c\"]) {\n                    _this.circle4.stroke = _this.color4;\n                }\n                if (msg[\"l\"]) {\n                    _this.left.stroke = _this.color4;\n                }\n                if (msg[\"r\"]) {\n                    _this.right.stroke = _this.color4;\n                }\n                if (msg[\"ll\"]) {\n                    _this.lineLeft.fill = _this.colorLeftLine;\n                }\n                if (msg[\"rl\"]) {\n                    _this.lineRight.fill = _this.colorRightLine;\n                }\n                if (msg[\"fa\"]) {\n                    _this.iconsController.showIcon(DashboardIcons.FrontAssist);\n                }\n                else {\n                    _this.iconsController.hideIcon(DashboardIcons.FrontAssist);\n                }\n                _this.canvas.renderAll();\n            }\n        };\n        this.turnOff = function () {\n            _this.isOff = true;\n            _this.update({ \"d\": 10000 });\n            _this.drawMiniDisplay();\n        };\n        this.turnOn = function () {\n            _this.isOff = false;\n            _this.drawMiniDisplay();\n        };\n        this.init = function (canvas) {\n            var startAngle = -2.618;\n            var endAngle = -0.5235;\n            startAngle = -2.35619;\n            endAngle = -0.785398;\n            _this.canvas = canvas;\n            _this.canvas.allowTouchScrolling = false;\n            _this.canvas.setZoom(1);\n            _this.circle1 = new fabric.Circle({\n                radius: 100,\n                left: -10,\n                top: 20,\n                angle: 0,\n                startAngle: startAngle,\n                endAngle: endAngle,\n                stroke: _this.colorOff,\n                strokeWidth: 17,\n                fill: \"\",\n                selectable: false\n            });\n            _this.circle2 = new fabric.Circle({\n                radius: 80,\n                left: 10,\n                top: 40,\n                angle: 0,\n                startAngle: startAngle,\n                endAngle: endAngle,\n                stroke: _this.colorOff,\n                strokeWidth: 17,\n                fill: \"\",\n                selectable: false\n            });\n            _this.circle3 = new fabric.Circle({\n                radius: 60,\n                left: 30,\n                top: 60,\n                angle: 0,\n                startAngle: startAngle,\n                endAngle: endAngle,\n                stroke: _this.colorOff,\n                strokeWidth: 17,\n                fill: \"\",\n                selectable: false\n            });\n            _this.circle4 = new fabric.Circle({\n                radius: 40,\n                left: 50,\n                top: 80,\n                angle: 0,\n                startAngle: startAngle,\n                endAngle: endAngle,\n                stroke: _this.colorOff,\n                strokeWidth: 17,\n                fill: \"\",\n                selectable: false\n            });\n            _this.left = new fabric.Circle({\n                radius: 40,\n                left: 50,\n                top: 80,\n                angle: 0,\n                startAngle: startAngle - 0.8,\n                endAngle: endAngle - 1.65,\n                stroke: _this.colorOff,\n                strokeWidth: 17,\n                fill: \"\",\n                selectable: false\n            });\n            _this.right = new fabric.Circle({\n                radius: 40,\n                left: 50,\n                top: 80,\n                angle: 0,\n                startAngle: startAngle + 1.65,\n                endAngle: endAngle + 0.8,\n                stroke: _this.colorOff,\n                strokeWidth: 17,\n                fill: \"\",\n                selectable: false\n            });\n            var body = new fabric.Rect({\n                top: 115,\n                left: 73,\n                width: 50,\n                height: 100,\n                fill: \"gray\",\n                selectable: false\n            });\n            var wleft = new fabric.Rect({\n                top: 180,\n                left: 45,\n                width: 25,\n                height: 50,\n                fill: \"dimgray\",\n                selectable: false\n            });\n            var wright = new fabric.Rect({\n                top: 180,\n                left: 126,\n                width: 25,\n                height: 50,\n                fill: \"dimgray\",\n                selectable: false\n            });\n            _this.lineLeft = new fabric.Rect({\n                top: 130,\n                left: 80,\n                width: 10,\n                height: 20,\n                fill: _this.colorOff,\n                selectable: false\n            });\n            _this.lineRight = new fabric.Rect({\n                top: 130,\n                left: 106,\n                width: 10,\n                height: 20,\n                fill: _this.colorOff,\n                selectable: false\n            });\n            var parkingControl = new fabric.Group([\n                _this.circle1, _this.circle2, _this.circle3, _this.circle4, _this.left, _this.right,\n                body, wleft, wright, _this.lineLeft, _this.lineRight\n            ], {\n                left: 1078,\n                top: 140,\n                width: 150,\n                scaleX: 1,\n                scaleY: 1,\n                lockScalingX: true,\n                lockScalingY: true,\n                lockScalingFlip: true,\n                hasBorders: false,\n                hasControls: false\n            });\n            _this.canvas.add(parkingControl);\n            _this.drawMiniDisplay();\n        };\n        this.drawMiniDisplay = function () {\n            if (_this.miniDisplayImage != null) {\n                _this.canvas.remove(_this.miniDisplayImage);\n            }\n            if (_this.isOff) {\n                _this.miniDisplay = new steelseries.DisplaySingle(\"gMini\", {\n                    width: 160,\n                    height: 60,\n                    valuesNumeric: false,\n                    value: \"off \",\n                    lcdDecimals: 0\n                });\n            }\n            else {\n                _this.miniDisplay = new steelseries.DisplaySingle(\"gMini\", {\n                    width: 160,\n                    height: 60,\n                    unitString: \"cm\",\n                    lcdDecimals: 0,\n                    unitStringVisible: true\n                });\n            }\n            var factor = Dashboard.getInstance().zoomFactor;\n            _this.miniDisplayImage = new fabric.Image(document.getElementById(\"gMini\"), {\n                left: 1073 * factor,\n                top: 360 * factor,\n                width: 160 * factor,\n                height: 60 * factor\n            });\n            _this.canvas.add(_this.miniDisplayImage);\n        };\n    }\n    return Parking;\n}());\n;\nvar RequestsHelper = (function () {\n    function RequestsHelper() {\n    }\n    RequestsHelper.prototype.put = function (command, callbackSuccess, callbackError) {\n        if (callbackSuccess === void 0) { callbackSuccess = null; }\n        if (callbackError === void 0) { callbackError = null; }\n        $.ajax({\n            url: Settings.Current.getBaseAPIUrl() + command,\n            type: \"PUT\",\n            success: function (result) {\n                console.log(command);\n                if (callbackSuccess != null) {\n                    callbackSuccess(result);\n                }\n            },\n            error: function (result) {\n                console.log(result + command);\n                if (callbackError != null) {\n                    callbackError(result);\n                }\n            }\n        });\n    };\n    RequestsHelper.Current = new RequestsHelper();\n    return RequestsHelper;\n}());\nvar RobotControls = (function () {\n    function RobotControls() {\n        var _this = this;\n        this.joystickLeft = null;\n        this.accButton = null;\n        this.brakeButton = null;\n        this.currentSpeed = 40;\n        this.showDirectionJoystick = function () {\n            if (_this.joystickLeft != null)\n                return;\n            var currentDirectionAngle = 0;\n            Dashboard.getInstance().setCruiseControlSpeed(_this.currentSpeed);\n            _this.joystickLeft = nipplejs.create({\n                maxNumberOfNipples: 1,\n                zone: document.getElementById(\"jLeft\"),\n                mode: \"dynamic\",\n                size: 120,\n                position: { left: \"50%\", top: \"50%\" },\n                color: \"green\"\n            }).on(\"start end\", function (evt, data) {\n                if (evt.type === \"end\") {\n                    RequestsHelper.Current.put(\"motor/stop\");\n                    Dashboard.getInstance().stop();\n                }\n            }).on(\"move\", function (evt, data) {\n                var dist = data.distance;\n                if (dist > 10) {\n                    var angle = Math.floor(data.angle.degree / 10) * 10;\n                    if (angle !== currentDirectionAngle) {\n                        RequestsHelper.Current.put(\"motor/move/\" + angle);\n                        currentDirectionAngle = angle;\n                        Dashboard.getInstance().move();\n                        if ((angle > 100 && angle < 260) || angle < 80 || angle > 280) {\n                            Dashboard.getInstance().showIcon(DashboardIcons.TurnSignals);\n                        }\n                        else {\n                            Dashboard.getInstance().hideIcon(DashboardIcons.TurnSignals);\n                        }\n                    }\n                }\n            });\n        };\n    }\n    RobotControls.prototype.init = function () {\n        var _this = this;\n        this.accButton = $(\"#accButton\");\n        this.accButton.click(function () {\n            _this.modifySpeed(+10);\n        });\n        this.brakeButton = $(\"#brakeButton\");\n        this.brakeButton.click(function () {\n            _this.modifySpeed(-10);\n        });\n    };\n    RobotControls.prototype.show = function () {\n        this.showDirectionJoystick();\n        this.accButton.show();\n        this.brakeButton.show();\n    };\n    RobotControls.prototype.hide = function () {\n        if (this.joystickLeft != null) {\n            this.joystickLeft.destroy();\n            this.joystickLeft = null;\n        }\n        if (this.accButton != null) {\n            this.accButton.hide();\n        }\n        if (this.brakeButton != null) {\n            this.brakeButton.hide();\n        }\n    };\n    RobotControls.prototype.modifySpeed = function (speed) {\n        var _this = this;\n        RequestsHelper.Current.put(\"motor/speed/\" + (this.currentSpeed + speed), function (data) {\n            _this.currentSpeed = data[\"speed\"];\n            Dashboard.getInstance().setCruiseControlSpeed(_this.currentSpeed);\n        });\n    };\n    return RobotControls;\n}());\nvar Settings = (function () {\n    function Settings() {\n        var _this = this;\n        this.robotIpCookieName = \"RobotIP\";\n        this.robotIP = null;\n        this.show = function () {\n            BootstrapDialog.show({\n                title: \"Settings\",\n                message: $(\"<div></div>\").load(\"settings.html\"),\n                closable: true,\n                closeByBackdrop: true,\n                closeByKeyboard: true,\n                data: {},\n                onshow: function (dialogRef) {\n                },\n                onshown: function (dialogRef) {\n                    $(\"#robotIP\").val(_this.getRobotIp());\n                    $(\"#shutdownButton\").click(_this.executeShutdown);\n                    $(\"#rebootButton\").click(_this.executeReboot);\n                    $(\"#stopButton\").click(_this.executeStop);\n                },\n                buttons: [\n                    {\n                        label: \"Close\",\n                        action: function (dialogItself) {\n                            dialogItself.close();\n                        }\n                    }\n                ],\n                onhide: function (dialogRef) {\n                    _this.robotIP = $(\"#robotIP\").val();\n                    _this.storeRobotIp();\n                }\n            });\n        };\n        this.getBaseServerUrl = function () {\n            return \"http://\" + _this.getRobotIp();\n        };\n        this.getBaseAPIUrl = function () {\n            return \"http://\" + _this.getRobotIp() + \":80/ropi/api/v1.0/\";\n        };\n        this.getCameraUrl = function () {\n            return _this.getBaseServerUrl() + \":8080/stream/video.mjpeg\";\n        };\n    }\n    Settings.prototype.getRobotIp = function () {\n        if (!this.checkRobotIp(this.robotIP)) {\n            this.robotIP = Cookies.get(this.robotIpCookieName);\n            if (!this.checkRobotIp(this.robotIP)) {\n                this.robotIP = window.location.hostname;\n                if (!this.checkRobotIp(this.robotIP)) {\n                    this.robotIP = \"raspberrypi\";\n                }\n            }\n        }\n        return this.robotIP;\n    };\n    Settings.prototype.storeRobotIp = function () {\n        Cookies.set(this.robotIpCookieName, this.robotIP);\n    };\n    Settings.prototype.checkRobotIp = function (ip) {\n        return ip != null && ip !== \"\" && ip !== \"undefined\";\n    };\n    Settings.prototype.executeShutdown = function () {\n        BootstrapDialog.confirm({\n            title: \"WARNING\",\n            message: \"You are about to shutdown the Robot.\\r\\n You won't be able to reach it anymore (power on required)\",\n            type: BootstrapDialog.TYPE_DANGER,\n            btnOKLabel: \"Yes, shutdown!\",\n            btnOKClass: \"btn-danger\",\n            callback: function (result) {\n                if (result) {\n                    RequestsHelper.Current.put(\"system/shutdown\");\n                }\n            }\n        });\n    };\n    Settings.prototype.executeReboot = function () {\n        BootstrapDialog.confirm({\n            title: \"WARNING\",\n            message: \"You are about to reboot the Robot.\\r\\n Please wait few minutes then reconnect to the Robot.\",\n            type: BootstrapDialog.TYPE_WARNING,\n            btnOKLabel: \"Yes, reboot!\",\n            btnOKClass: \"btn-warning\",\n            callback: function (result) {\n                if (result) {\n                    RequestsHelper.Current.put(\"system/reboot\");\n                }\n            }\n        });\n    };\n    Settings.prototype.executeStop = function () {\n        BootstrapDialog.confirm({\n            title: \"WARNING\",\n            message: \"You are about to stop the server running on the Robot.\\r\\n You won't be able to reach it anymore (hard reset required)\",\n            type: BootstrapDialog.TYPE_DANGER,\n            btnOKLabel: \"Yes, stop it!\",\n            btnOKClass: \"btn-danger\",\n            callback: function (result) {\n                if (result) {\n                    RequestsHelper.Current.put(\"quit\");\n                }\n            }\n        });\n    };\n    Settings.Current = new Settings();\n    return Settings;\n}());\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.application = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n$(document).ready(function () {\n    new Application().run();\n});\nvar Application = (function () {\n    function Application() {\n        var _this = this;\n        this.socketio = null;\n        this.robotIpEntry = null;\n        this.cameraButton = null;\n        this.connectButton = null;\n        this.cameraControlsButton = null;\n        this.cameraControlsOff = null;\n        this.cameraControlsJoystick = null;\n        this.cameraControlsSteppedJoystick = null;\n        this.robotControls = new RobotControls();\n        this.cameraControls = new CameraControls();\n        this.run = function () {\n            _this.robotControls.init();\n            _this.cameraControls.init();\n            _this.cameraButton = $(\"#cameraButton\");\n            _this.cameraButton.bootstrapToggle();\n            _this.cameraButton.change(function () {\n                _this.processToggleCamera();\n            });\n            _this.connectButton = $(\"#connectButton\");\n            _this.connectButton.bootstrapToggle();\n            _this.connectButton.change(function () {\n                _this.processRobotToggle();\n            });\n            _this.cameraControlsButton = $(\"#controlsButtonOptions\");\n            _this.cameraControlsJoystick = $(\"#controlsJoystick\").click(function () {\n                _this.cameraControls.selectMode(CameraControl.FollowMeJoystick);\n            });\n            _this.cameraControlsSteppedJoystick = $(\"#controlsSteppedJoystick\").click(function () {\n                _this.cameraControls.selectMode(CameraControl.SteppedJoystick);\n            });\n            _this.disableControlsButton();\n            var settingsButton = $(\"#settingsButton\");\n            settingsButton.click(function () {\n                Settings.Current.show();\n            });\n            Dashboard.getInstance().show();\n        };\n        this.getToggleStatus = function (toggle) { return (toggle != null && toggle.prop(\"checked\")); };\n        this.getIsConnected = function () { return _this.getToggleStatus(_this.connectButton); };\n        this.getIsCameraActive = function () { return _this.getToggleStatus(_this.cameraButton); };\n        this.getIsControlsActive = function () { return true; };\n        this.disableControlsButton = function () {\n            _this.cameraControls.hide();\n            _this.cameraControlsButton.prop(\"disabled\", true);\n        };\n        this.enableControlsButton = function () {\n            _this.cameraControlsButton.prop(\"disabled\", false);\n            _this.cameraControls.show();\n        };\n        this.connect = function () {\n            _this.socketio = io.connect(Settings.Current.getBaseServerUrl() + \":80/\", { 'forceNew': true });\n            _this.socketio.on(\"connected\", function (msg) {\n                $(\"#badge\").text(msg.title);\n                Dashboard.getInstance().hideIcon(DashboardIcons.Engine);\n                _this.robotControls.modifySpeed(0);\n                if (msg.hasOwnProperty(\"logoUrl\")) {\n                    Dashboard.getInstance().setLogoUrl(msg.logoUrl);\n                }\n            });\n            _this.socketio.on(\"disconnected\", function (msg) {\n                $(\"#badge\").text('offline');\n                _this.connectButton.bootstrapToggle(\"off\");\n                _this.cameraButton.bootstrapToggle(\"off\");\n            });\n            _this.socketio.on(\"parking\", function (msg) {\n                Dashboard.getInstance().parkingControl.update(msg);\n            });\n            _this.socketio.on(\"sysinfo\", function (msg) {\n                Dashboard.getInstance().update(msg);\n            });\n            _this.socketio.on(\"error\", function (msg) {\n                Dashboard.getInstance().showIcon(DashboardIcons.Engine);\n            });\n            _this.socketio.on(\"reconnect_error\", function (msg) {\n                Dashboard.getInstance().showIcon(DashboardIcons.Engine);\n            });\n            _this.socketio.emit(\"connect\");\n        };\n        this.disconnect = function () {\n            if (_this.socketio !== null) {\n                _this.socketio.disconnect();\n            }\n        };\n        this.processToggleControls = function () {\n            if (!_this.getIsCameraActive())\n                return;\n        };\n        this.processToggleCamera = function () {\n            if (_this.getIsCameraActive()) {\n                Dashboard.getInstance().startCamera();\n                _this.enableControlsButton();\n            }\n            else {\n                Dashboard.getInstance().stopCamera();\n                if (!_this.getIsConnected()) {\n                    _this.cameraControls.hide();\n                    _this.disableControlsButton();\n                }\n            }\n        };\n        this.processRobotToggle = function () {\n            if (_this.getIsConnected()) {\n                Dashboard.getInstance().startEngine(function () {\n                    _this.connect();\n                    _this.robotControls.show();\n                    if (!_this.getIsCameraActive()) {\n                        _this.cameraButton.bootstrapToggle(\"toggle\");\n                    }\n                    _this.enableControlsButton();\n                });\n            }\n            else {\n                Dashboard.getInstance().stopEngine(function () {\n                    $(\"#badge\").text('offline');\n                    _this.robotControls.hide();\n                    _this.disconnect();\n                    if (!_this.getIsCameraActive()) {\n                        _this.disableControlsButton();\n                        _this.cameraControls.hide();\n                    }\n                });\n            }\n        };\n    }\n    return Application;\n}());\nvar CameraControl;\n(function (CameraControl) {\n    CameraControl[CameraControl[\"SteppedJoystick\"] = 0] = \"SteppedJoystick\";\n    CameraControl[CameraControl[\"FollowMeJoystick\"] = 1] = \"FollowMeJoystick\";\n})(CameraControl || (CameraControl = {}));\nvar CameraControls = (function () {\n    function CameraControls() {\n        var _this = this;\n        this.joystickRight = null;\n        this.currentTilt = 95;\n        this.currentPan = 90;\n        this.step = 10;\n        this.isBusy = false;\n        this.currentCameraControls = CameraControl.SteppedJoystick;\n        this.sendCameraCommand = function (command) {\n            if (_this.isBusy && command !== \"center\") {\n                console.log(\"Skipped request...\");\n                return;\n            }\n            _this.isBusy = true;\n            RequestsHelper.Current.put(\"servos/\" + command, _this.processResult, function () { return _this.isBusy = false; });\n        };\n        this.processResult = function (data) {\n            var pan = data[\"pan\"];\n            var tilt = data[\"tilt\"];\n            if (pan != null && pan !== -1) {\n                _this.currentPan = pan;\n            }\n            if (tilt != null && tilt !== -1) {\n                _this.currentTilt = data[\"tilt\"];\n            }\n            _this.isBusy = false;\n        };\n        this.adjustTilt = function (offset) { return (_this.currentTilt + offset); };\n        this.adjustPan = function (offset) { return (_this.currentPan + offset); };\n    }\n    CameraControls.prototype.init = function () {\n    };\n    CameraControls.prototype.selectMode = function (cameraControl) {\n        this.currentCameraControls = cameraControl;\n    };\n    CameraControls.prototype.show = function () {\n        var _this = this;\n        var currentDirection = null;\n        var currentDistance;\n        var currentPanPercent = 0;\n        var currentTiltPercent = 0;\n        var joystickSize = 120;\n        var distanceMax = Math.floor(joystickSize / 2);\n        var centerX = 0;\n        var centerY = 0;\n        var currentInterval;\n        var steppedStart = false;\n        this.hide();\n        this.currentCameraControls = CameraControl.SteppedJoystick;\n        if (this.joystickRight != null)\n            return;\n        this.joystickRight = nipplejs.create({\n            maxNumberOfNipples: 1,\n            zone: document.getElementById(\"jRight\"),\n            size: joystickSize,\n            mode: \"dynamic\",\n            position: { left: \"50%\", top: \"50%\" },\n            color: \"blue\"\n        }).on(\"start end\", function (evt, data) {\n            if (_this.currentCameraControls === CameraControl.FollowMeJoystick) {\n                if (evt.type === \"start\") {\n                    centerX = data.position.x;\n                    centerY = data.position.y;\n                    console.log(\"centerX:\" + centerX + \"  centerY:\" + centerY);\n                }\n                else {\n                    centerX = 0;\n                    centerY = 0;\n                    _this.sendCameraCommand(\"center\");\n                }\n                currentDirection = null;\n                currentDistance = 0;\n            }\n            else if (_this.currentCameraControls === CameraControl.SteppedJoystick) {\n                clearInterval(currentInterval);\n                if (evt.type === \"start\") {\n                    steppedStart = true;\n                }\n                else {\n                    _this.sendCameraCommand(\"move/stop\");\n                    if (steppedStart) {\n                        steppedStart = false;\n                        _this.sendCameraCommand(\"center\");\n                    }\n                }\n            }\n        }).on(\"move\", function (evt, data) {\n            if (_this.currentCameraControls === CameraControl.FollowMeJoystick) {\n                if (data == null || data.direction === null || data.position === null)\n                    return;\n                var panPercent = -Math.floor(((data.position.x - centerX) / distanceMax) * 100);\n                var tiltPercent = Math.floor(((data.position.y - centerY) / distanceMax) * 100);\n                if (panPercent > 100 || panPercent < -100 || tiltPercent > 100 || tiltPercent < -100) {\n                    return;\n                }\n                if (panPercent % 2 === 0 || tiltPercent % 2 === 0) {\n                    if (currentPanPercent !== panPercent || currentTiltPercent !== tiltPercent) {\n                        currentPanPercent = panPercent;\n                        currentTiltPercent = tiltPercent;\n                        _this.sendCameraCommand(\"percent/\" + panPercent + \"/\" + tiltPercent);\n                    }\n                }\n            }\n        }).on(\"dir\", function (evt, data) {\n            if (_this.currentCameraControls === CameraControl.SteppedJoystick) {\n                steppedStart = false;\n                var direction = data.direction.angle;\n                console.log(direction);\n                if (currentDirection === direction) {\n                    return;\n                }\n                currentDirection = direction;\n                _this.sendCameraCommand(\"move/\" + currentDirection);\n            }\n        });\n    };\n    CameraControls.prototype.hide = function () {\n        if (this.joystickRight != null) {\n            this.joystickRight.destroy();\n            this.joystickRight = null;\n        }\n        this.currentCameraControls = CameraControl.SteppedJoystick;\n    };\n    return CameraControls;\n}());\nvar Dashboard = (function () {\n    function Dashboard() {\n        var _this = this;\n        this.parkingControl = new Parking();\n        this.dummyVoltageValue = \"22.5 °C\";\n        this.tempWarningLimit = 60;\n        this.warningTemperatureColor = steelseries.ColorDef.RED;\n        this.normalTemperatureColor = steelseries.ColorDef.RAITH;\n        this.logoUrl = null;\n        this.canvas = new fabric.StaticCanvas(\"dashboard\");\n        this.zoomFactor = 1;\n        this.originalWidth = 1408;\n        this.originalHeight = 513;\n        this.isCameraVisible = false;\n        this.cruiseControlSpeed = 0;\n        this.isMoving = false;\n        this.show = function () {\n            _this.canvas.setBackgroundColor(\"black\", function () { });\n            _this.canvas.setHeight(_this.originalHeight);\n            _this.canvas.setWidth(_this.originalWidth);\n            _this.clockController = new DashboardClockController(_this.canvas);\n            _this.iconsController = new DashboardIconsController(_this.canvas);\n            _this.parkingControl.iconsController = _this.iconsController;\n            _this.drawMiddleDisplay();\n            _this.drawCameraAndGauges();\n            setInterval(function () {\n                if (_this.clockController.isVisible()) {\n                    _this.clockController.updateTime();\n                    if (_this.cameraInterval == null) {\n                        _this.canvas.renderAll();\n                    }\n                }\n            }, 1000);\n            window.onresize = _this.resizeCanvas;\n            _this.tempInterval = setInterval(function () {\n                clearInterval(_this.tempInterval);\n                _this.resizeCanvas();\n            }, 500);\n        };\n        this.startEngine = function (callback) {\n            _this.iconsController.showAllIcons();\n            _this.leftGauge.setValue(100);\n            _this.rightGauge.setValue(90);\n            _this.rightGauge.setValueColor(_this.normalTemperatureColor);\n            _this.miniGaugeLeft.setValue(100);\n            _this.miniGaugeRight.setValue(100);\n            setTimeout(function () {\n                _this.iconsController.hideAllIcons();\n                _this.leftGauge.setValue(0);\n                _this.rightGauge.setValue(0);\n                _this.miniGaugeLeft.setValue(0);\n                _this.miniGaugeRight.setValue(0);\n                _this.parkingControl.turnOn();\n                _this.showIcon(DashboardIcons.ParkingSensors);\n                _this.showIcon(DashboardIcons.Headlights);\n                _this.showIcon(DashboardIcons.ParkingBrake);\n                _this.showIcon(DashboardIcons.SeatBelt);\n                if (callback != null) {\n                    callback();\n                }\n            }, 1500);\n        };\n        this.stopEngine = function (callback) {\n            _this.setLogoUrl(null);\n            _this.showClockOrLogo();\n            _this.parkingControl.turnOff();\n            _this.miniGaugeLeft.setValue(0);\n            _this.miniGaugeRight.setValue(0);\n            _this.rightGauge.setValueAnimated(0);\n            _this.rightGauge.setValueColor(_this.normalTemperatureColor);\n            _this.iconsController.hideAllIcons();\n            _this.voltageText.setText(_this.dummyVoltageValue);\n            if (callback != null) {\n                callback();\n            }\n        };\n        this.setCruiseControlSpeed = function (speed) {\n            if (_this.leftGauge != null) {\n                var needMove = false;\n                if (_this.cruiseControlSpeed !== speed && _this.isMoving) {\n                    needMove = true;\n                }\n                _this.cruiseControlSpeed = speed;\n                _this.leftGauge.setThreshold(_this.cruiseControlSpeed);\n                if (needMove) {\n                    _this.move();\n                }\n            }\n            if (_this.cruiseControlSpeed === 0) {\n                _this.hideIcon(DashboardIcons.Tempomat);\n            }\n            else {\n                _this.showIcon(DashboardIcons.Tempomat);\n            }\n        };\n        this.move = function () {\n            if (_this.leftGauge != null && _this.cruiseControlSpeed != null && !_this.isMoving) {\n                _this.hideIcon(DashboardIcons.ParkingBrake);\n                _this.isMoving = true;\n                _this.leftGauge.setValueAnimated(_this.cruiseControlSpeed);\n            }\n        };\n        this.stop = function () {\n            if (_this.leftGauge != null) {\n                _this.isMoving = false;\n                _this.leftGauge.setValueAnimated(0);\n                _this.showIcon(DashboardIcons.ParkingBrake);\n                _this.hideIcon(DashboardIcons.TurnSignals);\n            }\n        };\n        this.showIcon = function (icon) {\n            _this.iconsController.showIcon(icon);\n        };\n        this.hideIcon = function (icon) {\n            _this.iconsController.hideIcon(icon);\n        };\n        this.startCamera = function () {\n            var img = document.getElementById(\"camera\");\n            img.onload = function () {\n                _this.hideLogo();\n                _this.hideClock();\n                _this.cameraImage.setElement(img);\n                _this.cameraImage.width = 500;\n                _this.cameraImage.height = 375;\n            };\n            img.onerror = function () {\n                _this.showClockOrLogo();\n            };\n            img.src = Settings.Current.getCameraUrl();\n            _this.cameraInterval = setInterval(function () {\n                _this.canvas.renderAll();\n            }, 250);\n        };\n        this.stopCamera = function () {\n            if (_this.cameraInterval != null) {\n                clearInterval(_this.cameraInterval);\n                _this.cameraInterval = null;\n            }\n            var img = document.getElementById(\"camera\");\n            img.onerror = function () {\n                _this.showClockOrLogo();\n            };\n            img.src = \"http://\";\n        };\n        this.update = function (msg) {\n            if (_this.canvas != null) {\n                var memPercent = msg[\"mp\"];\n                var cpuPercent = msg[\"cp\"];\n                var cpuTemp = msg[\"ct\"];\n                _this.rightGauge.setValueAnimated(cpuTemp);\n                _this.miniGaugeLeft.setValue(cpuPercent);\n                _this.miniGaugeRight.setValue(memPercent);\n                if (cpuTemp > _this.tempWarningLimit) {\n                    _this.iconsController.showIcon(DashboardIcons.WaterTemperature);\n                    _this.rightGauge.setValueColor(_this.warningTemperatureColor);\n                }\n                else {\n                    _this.iconsController.hideIcon(DashboardIcons.WaterTemperature);\n                    _this.rightGauge.setValueColor(_this.normalTemperatureColor);\n                }\n                if (msg[\"v\"] !== \"0\") {\n                    _this.voltageText.setText(msg[\"v\"] + \" V\");\n                }\n                else {\n                    _this.voltageText.setText(_this.dummyVoltageValue);\n                }\n            }\n        };\n        this.setLogoUrl = function (logo) {\n            _this.logoUrl = logo;\n        };\n        this.hideLogo = function () {\n            _this.canvas.remove(_this.logoImage);\n            _this.canvas.renderAll();\n        };\n        this.hideClock = function () {\n            _this.clockController.hideClock();\n        };\n        this.showClockOrLogo = function () {\n            _this.clockController.hideClock();\n            if (_this.logoUrl !== null) {\n                fabric.Image.fromURL(_this.logoUrl, function (image) {\n                    _this.logoImage = image;\n                    var ar = image.height / image.width;\n                    image.width = 200 * _this.zoomFactor;\n                    image.left = 705 * _this.zoomFactor - image.width / 2;\n                    image.height = image.width * ar;\n                    image.top = 220 * _this.zoomFactor - image.height / 2;\n                    _this.canvas.add(image);\n                    _this.canvas.renderAll();\n                });\n            }\n            else {\n                _this.hideLogo();\n                _this.clockController.showClock();\n            }\n        };\n        this.drawCameraAndGauges = function () {\n            fabric.Image.fromURL(\"http://\", function (image) {\n                _this.cameraImage = image;\n                var ar = image.height / image.width;\n                image.left = 455;\n                image.top = 60;\n                _this.canvas.add(image);\n                _this.drawGauges();\n            });\n            _this.showClockOrLogo();\n        };\n        this.drawLeftGauge = function () {\n            _this.leftGauge = new steelseries.Radial(\"gLeft\", {\n                gaugeType: steelseries.GaugeType.TYPE3,\n                minValue: 0,\n                maxValue: 100,\n                size: 510,\n                ledVisible: false,\n                foregroundType: steelseries.ForegroundType.TYPE3,\n                frameDesign: steelseries.FrameDesign.TILTED_BLACK,\n                knobStyle: steelseries.KnobStyle.SILVER,\n                pointerType: steelseries.PointerType.TYPE9,\n                lcdDecimals: 0,\n                threshold: 0,\n                tickLabelOrientation: steelseries.TickLabelOrientation.HORIZONTAL,\n                section: null,\n                area: null,\n                titleString: \"Speed\",\n                unitString: \"%\",\n                lcdVisible: true,\n                useOdometer: true,\n                odometerParams: { digits: 5 },\n                backgroundColor: steelseries.BackgroundColor.CARBON\n            });\n            var leftGaugeImage = new fabric.Image(document.getElementById(\"gLeft\"), {\n                left: 0,\n                top: 0,\n                width: 510,\n                height: 510\n            });\n            _this.canvas.add(leftGaugeImage);\n            _this.voltageText = new fabric.Text(_this.dummyVoltageValue, {\n                fontSize: 28,\n                textAlign: \"center\",\n                left: 890,\n                top: 25,\n                fontFamily: \"Arial\",\n                fill: \"white\"\n            });\n            _this.canvas.add(_this.voltageText);\n            _this.miniGaugeLeft = new steelseries.Linear(\"gMiniLeft\", {\n                gaugeType: steelseries.GaugeType.TYPE1,\n                backgroundVisible: false,\n                frameVisible: false,\n                minValue: 0,\n                maxValue: 100,\n                ledVisible: false,\n                thresholdVisible: false,\n                lcdVisible: false,\n                niceScale: false,\n                foregroundVisible: false,\n            });\n            var miniGaugeLeftImage = new fabric.Image(document.getElementById(\"gMiniLeft\"), {\n                left: 405,\n                top: 400,\n                width: 340,\n                height: 80\n            });\n            _this.canvas.add(miniGaugeLeftImage);\n            _this.miniGaugeRight = new steelseries.Linear(\"gMiniRight\", {\n                gaugeType: steelseries.GaugeType.TYPE1,\n                backgroundVisible: false,\n                frameVisible: false,\n                minValue: 0,\n                maxValue: 100,\n                ledVisible: false,\n                lcdVisible: false,\n                niceScale: true,\n                thresholdVisible: false,\n                foregroundVisible: false,\n            });\n            var miniGaugeRightImage = new fabric.Image(document.getElementById(\"gMiniRight\"), {\n                left: 660,\n                top: 400,\n                width: 340,\n                height: 80\n            });\n            _this.canvas.add(miniGaugeRightImage);\n        };\n        this.drawRightGauge = function () {\n            _this.rightGauge = new steelseries.RadialBargraph(\"gRight\", {\n                gaugeType: steelseries.GaugeType.TYPE2,\n                minValue: 10,\n                maxValue: 90,\n                size: 510,\n                valueColor: _this.normalTemperatureColor,\n                tickLabelOrientation: steelseries.TickLabelOrientation.HORIZONTAL,\n                foregroundType: steelseries.ForegroundType.TYPE3,\n                frameDesign: steelseries.FrameDesign.TILTED_BLACK,\n                ledVisible: false,\n                niceScale: false,\n                fractionalScaleDecimals: false,\n                useValueGradient: true,\n                section: null,\n                area: null,\n                lcdVisible: false,\n                backgroundColor: steelseries.BackgroundColor.CARBON\n            });\n            var rightGaugeImage = new fabric.Image(document.getElementById(\"gRight\"), {\n                left: 898,\n                top: 0,\n                width: 510,\n                height: 510\n            });\n            _this.canvas.add(rightGaugeImage);\n            var degreesSymbol = new fabric.Text(\"°C\", {\n                fontSize: 28,\n                textAlign: \"center\",\n                left: 1317,\n                top: 270,\n                fontFamily: \"Arial\",\n                fill: \"white\"\n            });\n            _this.canvas.add(degreesSymbol);\n        };\n        this.drawGauges = function () {\n            _this.drawLeftGauge();\n            _this.drawRightGauge();\n            _this.parkingControl.init(_this.canvas);\n        };\n        this.drawMiddleDisplay = function () {\n            _this.canvas.add(new fabric.Line([400, 59, 1000, 59], {\n                stroke: \"gray\",\n                strokeWidth: 2\n            }));\n            _this.canvas.add(new fabric.Line([400, 436, 1000, 436], {\n                stroke: \"gray\",\n                strokeWidth: 2\n            }));\n        };\n        this.zoomIt = function (factor) {\n            _this.canvas.setHeight(_this.canvas.getHeight() * factor);\n            _this.canvas.setWidth(_this.canvas.getWidth() * factor);\n            if (_this.canvas.backgroundImage) {\n                var bi = _this.canvas.backgroundImage;\n                bi.width = bi.width * factor;\n                bi.height = bi.height * factor;\n            }\n            var objects = _this.canvas.getObjects();\n            for (var i in objects) {\n                var scaleX = objects[i].scaleX;\n                var scaleY = objects[i].scaleY;\n                var left = objects[i].left;\n                var top_1 = objects[i].top;\n                var tempScaleX = scaleX * factor;\n                var tempScaleY = scaleY * factor;\n                var tempLeft = left * factor;\n                var tempTop = top_1 * factor;\n                objects[i].scaleX = tempScaleX;\n                objects[i].scaleY = tempScaleY;\n                objects[i].left = tempLeft;\n                objects[i].top = tempTop;\n                objects[i].setCoords();\n            }\n            _this.canvas.renderAll();\n            _this.canvas.calcOffset();\n        };\n        this.resizeCanvas = function () {\n            var clientWidth = window.innerWidth;\n            _this.zoomFactor = clientWidth / _this.canvas.getWidth();\n            _this.zoomIt(_this.zoomFactor);\n        };\n        if (Dashboard.instance) {\n            throw new Error(\"Error - use Dashboard.getInstance()\");\n        }\n    }\n    Dashboard.getInstance = function () {\n        Dashboard.instance = Dashboard.instance || new Dashboard();\n        return Dashboard.instance;\n    };\n    return Dashboard;\n}());\nvar DashboardClockController = (function () {\n    function DashboardClockController(canvas) {\n        var _this = this;\n        this.isVisible = function () {\n            return _this.visible;\n        };\n        this.hideClock = function () {\n            _this.canvas.remove(_this.clockGaugeImage);\n            _this.canvas.renderAll();\n            _this.visible = false;\n        };\n        this.showClock = function () {\n            _this.hideClock();\n            new steelseries.Clock(\"gClock\", {\n                gaugeType: steelseries.GaugeType.TYPE4,\n                size: 170,\n                secondPointerVisible: true,\n                backgroundVisible: true,\n                backgroundColor: steelseries.BackgroundColor.BRUSHED_STAINLESS,\n                frameVisible: false,\n                frameDesign: steelseries.FrameDesign.TILTED_BLACK,\n                minValue: 20,\n                maxValue: 80,\n                value: 45,\n                niceScale: true,\n                pointerType: steelseries.PointerType.TYPE5,\n            });\n            var factor = Dashboard.getInstance().zoomFactor;\n            _this.clockGaugeImage = new fabric.Image(document.getElementById(\"gClock\"), {\n                left: 579 * factor,\n                top: 120 * factor,\n                width: 250 * factor,\n                height: 250 * factor\n            });\n            _this.canvas.add(_this.clockGaugeImage);\n            _this.canvas.renderAll();\n            _this.visible = true;\n        };\n        this.updateTime = function () {\n            var today = new Date();\n            var h = _this.checkTime(today.getHours());\n            var m = _this.checkTime(today.getMinutes());\n            _this.clockText.setText(h + \":\" + m);\n        };\n        this.checkTime = function (i) {\n            if (i < 10) {\n                i = \"0\" + i;\n            }\n            ;\n            return i;\n        };\n        this.canvas = canvas;\n        this.clockText = new fabric.Text(\"21:45\", {\n            fontSize: 28,\n            textAlign: \"center\",\n            left: 420,\n            top: 25,\n            fontFamily: \"Arial\",\n            fill: \"white\"\n        });\n        this.canvas.add(this.clockText);\n        this.updateTime();\n    }\n    return DashboardClockController;\n}());\nvar DashboardIcons;\n(function (DashboardIcons) {\n    DashboardIcons[DashboardIcons[\"SeatBelt\"] = 0] = \"SeatBelt\";\n    DashboardIcons[DashboardIcons[\"Tempomat\"] = 1] = \"Tempomat\";\n    DashboardIcons[DashboardIcons[\"FrontAssist\"] = 2] = \"FrontAssist\";\n    DashboardIcons[DashboardIcons[\"Engine\"] = 3] = \"Engine\";\n    DashboardIcons[DashboardIcons[\"Headlights\"] = 4] = \"Headlights\";\n    DashboardIcons[DashboardIcons[\"LaneAssist\"] = 5] = \"LaneAssist\";\n    DashboardIcons[DashboardIcons[\"ParkingBrake\"] = 6] = \"ParkingBrake\";\n    DashboardIcons[DashboardIcons[\"ParkingSensors\"] = 7] = \"ParkingSensors\";\n    DashboardIcons[DashboardIcons[\"WaterTemperature\"] = 8] = \"WaterTemperature\";\n    DashboardIcons[DashboardIcons[\"TurnSignals\"] = 9] = \"TurnSignals\";\n})(DashboardIcons || (DashboardIcons = {}));\nvar DashboardIconsController = (function () {\n    function DashboardIconsController(canvas) {\n        this.icons = {};\n        this.canvas = canvas;\n    }\n    DashboardIconsController.prototype.showIcon = function (target) {\n        var _this = this;\n        var icon = this.icons[target];\n        if (icon != undefined && icon.isVisible) {\n            return;\n        }\n        else {\n            this.icons[target] = { id: target, isVisible: true };\n        }\n        var path = null;\n        var left = -1;\n        var top = -1;\n        switch (target) {\n            case DashboardIcons.Engine:\n                path = \"/images/Engine.svg\";\n                left = 675;\n                top = 445;\n                break;\n            case DashboardIcons.FrontAssist:\n                path = \"/images/Frontassist.svg\";\n                left = 1230;\n                top = 300;\n                break;\n            case DashboardIcons.Headlights:\n                path = \"/images/Headlights.svg\";\n                left = 615;\n                top = 10;\n                break;\n            case DashboardIcons.LaneAssist:\n                path = \"/images/Laneassist.svg\";\n                left = 525;\n                top = 445;\n                break;\n            case DashboardIcons.ParkingBrake:\n                path = \"/images/Parkingbrake.svg\";\n                left = 840;\n                top = 445;\n                break;\n            case DashboardIcons.ParkingSensors:\n                path = \"/images/Parkingsensors.svg\";\n                left = 1030;\n                top = 300;\n                break;\n            case DashboardIcons.SeatBelt:\n                path = \"/images/Seatbelt.svg\";\n                left = 900;\n                top = 445;\n                break;\n            case DashboardIcons.Tempomat:\n                path = \"/images/Tempomat.svg\";\n                left = 465;\n                top = 445;\n                break;\n            case DashboardIcons.TurnSignals:\n                path = \"/images/Turnsignal.svg\";\n                left = 675;\n                top = 10;\n                break;\n            case DashboardIcons.WaterTemperature:\n                path = \"/images/Temperature.svg\";\n                left = 960;\n                top = 280;\n                break;\n        }\n        if (path !== null && left !== -1 && top !== -1) {\n            fabric.loadSVGFromURL(path, function (objects) {\n                var factor = Dashboard.getInstance().zoomFactor;\n                var result = new fabric.PathGroup(objects, {\n                    left: left * factor,\n                    top: top * factor\n                });\n                result.scaleX = 0.7 * factor;\n                result.scaleY = 0.7 * factor;\n                _this.canvas.add(result);\n                _this.icons[target] = { id: target, iconPath: result, isVisible: true };\n            });\n        }\n    };\n    DashboardIconsController.prototype.hideIcon = function (target) {\n        var icon = this.icons[target];\n        if (icon != undefined && icon.isVisible) {\n            icon.isVisible = false;\n            this.canvas.remove(icon.iconPath);\n            icon.iconPath = null;\n        }\n    };\n    DashboardIconsController.prototype.showAllIcons = function () {\n        this.showIcon(DashboardIcons.Engine);\n        this.showIcon(DashboardIcons.FrontAssist);\n        this.showIcon(DashboardIcons.Headlights);\n        this.showIcon(DashboardIcons.LaneAssist);\n        this.showIcon(DashboardIcons.ParkingBrake);\n        this.showIcon(DashboardIcons.ParkingSensors);\n        this.showIcon(DashboardIcons.SeatBelt);\n        this.showIcon(DashboardIcons.Tempomat);\n        this.showIcon(DashboardIcons.TurnSignals);\n        this.showIcon(DashboardIcons.WaterTemperature);\n    };\n    DashboardIconsController.prototype.hideAllIcons = function () {\n        this.hideIcon(DashboardIcons.Engine);\n        this.hideIcon(DashboardIcons.FrontAssist);\n        this.hideIcon(DashboardIcons.Headlights);\n        this.hideIcon(DashboardIcons.LaneAssist);\n        this.hideIcon(DashboardIcons.ParkingBrake);\n        this.hideIcon(DashboardIcons.ParkingSensors);\n        this.hideIcon(DashboardIcons.SeatBelt);\n        this.hideIcon(DashboardIcons.Tempomat);\n        this.hideIcon(DashboardIcons.TurnSignals);\n        this.hideIcon(DashboardIcons.WaterTemperature);\n    };\n    return DashboardIconsController;\n}());\nvar Parking = (function () {\n    function Parking() {\n        var _this = this;\n        this.colorOff = \"lightGray\";\n        this.color1 = \"yellow\";\n        this.color2 = \"orange\";\n        this.color3 = \"orangered\";\n        this.color4 = \"red\";\n        this.colorLeftLine = \"red\";\n        this.colorRightLine = \"green\";\n        this.isOff = true;\n        this.circle1 = null;\n        this.circle2 = null;\n        this.circle3 = null;\n        this.circle4 = null;\n        this.left = null;\n        this.right = null;\n        this.lineLeft = null;\n        this.lineRight = null;\n        this.update = function (msg) {\n            if (_this.canvas != null) {\n                _this.circle1.stroke = _this.colorOff;\n                _this.circle2.stroke = _this.colorOff;\n                _this.circle3.stroke = _this.colorOff;\n                _this.circle4.stroke = _this.colorOff;\n                _this.left.stroke = _this.colorOff;\n                _this.right.stroke = _this.colorOff;\n                _this.lineLeft.fill = _this.colorOff;\n                _this.lineRight.fill = _this.colorOff;\n                var dist = msg[\"d\"];\n                if (!_this.isOff) {\n                    _this.miniDisplay.setValue(dist);\n                }\n                if (dist < 50 && dist >= 30) {\n                    _this.circle1.stroke = _this.color1;\n                }\n                if (dist < 30 && dist >= 20) {\n                    _this.circle2.stroke = _this.color2;\n                }\n                if (dist < 20 && dist >= 10) {\n                    _this.circle3.stroke = _this.color3;\n                }\n                if (dist < 10 || msg[\"c\"]) {\n                    _this.circle4.stroke = _this.color4;\n                }\n                if (msg[\"l\"]) {\n                    _this.left.stroke = _this.color4;\n                }\n                if (msg[\"r\"]) {\n                    _this.right.stroke = _this.color4;\n                }\n                if (msg[\"ll\"]) {\n                    _this.lineLeft.fill = _this.colorLeftLine;\n                }\n                if (msg[\"rl\"]) {\n                    _this.lineRight.fill = _this.colorRightLine;\n                }\n                if (msg[\"fa\"]) {\n                    _this.iconsController.showIcon(DashboardIcons.FrontAssist);\n                }\n                else {\n                    _this.iconsController.hideIcon(DashboardIcons.FrontAssist);\n                }\n                _this.canvas.renderAll();\n            }\n        };\n        this.turnOff = function () {\n            _this.isOff = true;\n            _this.update({ \"d\": 10000 });\n            _this.drawMiniDisplay();\n        };\n        this.turnOn = function () {\n            _this.isOff = false;\n            _this.drawMiniDisplay();\n        };\n        this.init = function (canvas) {\n            var startAngle = -2.618;\n            var endAngle = -0.5235;\n            startAngle = -2.35619;\n            endAngle = -0.785398;\n            _this.canvas = canvas;\n            _this.canvas.allowTouchScrolling = false;\n            _this.canvas.setZoom(1);\n            _this.circle1 = new fabric.Circle({\n                radius: 100,\n                left: -10,\n                top: 20,\n                angle: 0,\n                startAngle: startAngle,\n                endAngle: endAngle,\n                stroke: _this.colorOff,\n                strokeWidth: 17,\n                fill: \"\",\n                selectable: false\n            });\n            _this.circle2 = new fabric.Circle({\n                radius: 80,\n                left: 10,\n                top: 40,\n                angle: 0,\n                startAngle: startAngle,\n                endAngle: endAngle,\n                stroke: _this.colorOff,\n                strokeWidth: 17,\n                fill: \"\",\n                selectable: false\n            });\n            _this.circle3 = new fabric.Circle({\n                radius: 60,\n                left: 30,\n                top: 60,\n                angle: 0,\n                startAngle: startAngle,\n                endAngle: endAngle,\n                stroke: _this.colorOff,\n                strokeWidth: 17,\n                fill: \"\",\n                selectable: false\n            });\n            _this.circle4 = new fabric.Circle({\n                radius: 40,\n                left: 50,\n                top: 80,\n                angle: 0,\n                startAngle: startAngle,\n                endAngle: endAngle,\n                stroke: _this.colorOff,\n                strokeWidth: 17,\n                fill: \"\",\n                selectable: false\n            });\n            _this.left = new fabric.Circle({\n                radius: 40,\n                left: 50,\n                top: 80,\n                angle: 0,\n                startAngle: startAngle - 0.8,\n                endAngle: endAngle - 1.65,\n                stroke: _this.colorOff,\n                strokeWidth: 17,\n                fill: \"\",\n                selectable: false\n            });\n            _this.right = new fabric.Circle({\n                radius: 40,\n                left: 50,\n                top: 80,\n                angle: 0,\n                startAngle: startAngle + 1.65,\n                endAngle: endAngle + 0.8,\n                stroke: _this.colorOff,\n                strokeWidth: 17,\n                fill: \"\",\n                selectable: false\n            });\n            var body = new fabric.Rect({\n                top: 115,\n                left: 73,\n                width: 50,\n                height: 100,\n                fill: \"gray\",\n                selectable: false\n            });\n            var wleft = new fabric.Rect({\n                top: 180,\n                left: 45,\n                width: 25,\n                height: 50,\n                fill: \"dimgray\",\n                selectable: false\n            });\n            var wright = new fabric.Rect({\n                top: 180,\n                left: 126,\n                width: 25,\n                height: 50,\n                fill: \"dimgray\",\n                selectable: false\n            });\n            _this.lineLeft = new fabric.Rect({\n                top: 130,\n                left: 80,\n                width: 10,\n                height: 20,\n                fill: _this.colorOff,\n                selectable: false\n            });\n            _this.lineRight = new fabric.Rect({\n                top: 130,\n                left: 106,\n                width: 10,\n                height: 20,\n                fill: _this.colorOff,\n                selectable: false\n            });\n            var parkingControl = new fabric.Group([\n                _this.circle1, _this.circle2, _this.circle3, _this.circle4, _this.left, _this.right,\n                body, wleft, wright, _this.lineLeft, _this.lineRight\n            ], {\n                left: 1078,\n                top: 140,\n                width: 150,\n                scaleX: 1,\n                scaleY: 1,\n                lockScalingX: true,\n                lockScalingY: true,\n                lockScalingFlip: true,\n                hasBorders: false,\n                hasControls: false\n            });\n            _this.canvas.add(parkingControl);\n            _this.drawMiniDisplay();\n        };\n        this.drawMiniDisplay = function () {\n            if (_this.miniDisplayImage != null) {\n                _this.canvas.remove(_this.miniDisplayImage);\n            }\n            if (_this.isOff) {\n                _this.miniDisplay = new steelseries.DisplaySingle(\"gMini\", {\n                    width: 160,\n                    height: 60,\n                    valuesNumeric: false,\n                    value: \"off \",\n                    lcdDecimals: 0\n                });\n            }\n            else {\n                _this.miniDisplay = new steelseries.DisplaySingle(\"gMini\", {\n                    width: 160,\n                    height: 60,\n                    unitString: \"cm\",\n                    lcdDecimals: 0,\n                    unitStringVisible: true\n                });\n            }\n            var factor = Dashboard.getInstance().zoomFactor;\n            _this.miniDisplayImage = new fabric.Image(document.getElementById(\"gMini\"), {\n                left: 1073 * factor,\n                top: 360 * factor,\n                width: 160 * factor,\n                height: 60 * factor\n            });\n            _this.canvas.add(_this.miniDisplayImage);\n        };\n    }\n    return Parking;\n}());\n;\nvar RequestsHelper = (function () {\n    function RequestsHelper() {\n    }\n    RequestsHelper.prototype.put = function (command, callbackSuccess, callbackError) {\n        if (callbackSuccess === void 0) { callbackSuccess = null; }\n        if (callbackError === void 0) { callbackError = null; }\n        $.ajax({\n            url: Settings.Current.getBaseAPIUrl() + command,\n            type: \"PUT\",\n            success: function (result) {\n                console.log(command);\n                if (callbackSuccess != null) {\n                    callbackSuccess(result);\n                }\n            },\n            error: function (result) {\n                console.log(result + command);\n                if (callbackError != null) {\n                    callbackError(result);\n                }\n            }\n        });\n    };\n    RequestsHelper.Current = new RequestsHelper();\n    return RequestsHelper;\n}());\nvar RobotControls = (function () {\n    function RobotControls() {\n        var _this = this;\n        this.joystickLeft = null;\n        this.accButton = null;\n        this.brakeButton = null;\n        this.currentSpeed = 40;\n        this.showDirectionJoystick = function () {\n            if (_this.joystickLeft != null)\n                return;\n            var currentDirectionAngle = 0;\n            Dashboard.getInstance().setCruiseControlSpeed(_this.currentSpeed);\n            _this.joystickLeft = nipplejs.create({\n                maxNumberOfNipples: 1,\n                zone: document.getElementById(\"jLeft\"),\n                mode: \"dynamic\",\n                size: 120,\n                position: { left: \"50%\", top: \"50%\" },\n                color: \"green\"\n            }).on(\"start end\", function (evt, data) {\n                if (evt.type === \"end\") {\n                    RequestsHelper.Current.put(\"motor/stop\");\n                    Dashboard.getInstance().stop();\n                }\n            }).on(\"move\", function (evt, data) {\n                var dist = data.distance;\n                if (dist > 10) {\n                    var angle = Math.floor(data.angle.degree / 10) * 10;\n                    if (angle !== currentDirectionAngle) {\n                        RequestsHelper.Current.put(\"motor/move/\" + angle);\n                        currentDirectionAngle = angle;\n                        Dashboard.getInstance().move();\n                        if ((angle > 100 && angle < 260) || angle < 80 || angle > 280) {\n                            Dashboard.getInstance().showIcon(DashboardIcons.TurnSignals);\n                        }\n                        else {\n                            Dashboard.getInstance().hideIcon(DashboardIcons.TurnSignals);\n                        }\n                    }\n                }\n            });\n        };\n    }\n    RobotControls.prototype.init = function () {\n        var _this = this;\n        this.accButton = $(\"#accButton\");\n        this.accButton.click(function () {\n            _this.modifySpeed(+10);\n        });\n        this.brakeButton = $(\"#brakeButton\");\n        this.brakeButton.click(function () {\n            _this.modifySpeed(-10);\n        });\n    };\n    RobotControls.prototype.show = function () {\n        this.showDirectionJoystick();\n        this.accButton.show();\n        this.brakeButton.show();\n    };\n    RobotControls.prototype.hide = function () {\n        if (this.joystickLeft != null) {\n            this.joystickLeft.destroy();\n            this.joystickLeft = null;\n        }\n        if (this.accButton != null) {\n            this.accButton.hide();\n        }\n        if (this.brakeButton != null) {\n            this.brakeButton.hide();\n        }\n    };\n    RobotControls.prototype.modifySpeed = function (speed) {\n        var _this = this;\n        RequestsHelper.Current.put(\"motor/speed/\" + (this.currentSpeed + speed), function (data) {\n            _this.currentSpeed = data[\"speed\"];\n            Dashboard.getInstance().setCruiseControlSpeed(_this.currentSpeed);\n        });\n    };\n    return RobotControls;\n}());\nvar Settings = (function () {\n    function Settings() {\n        var _this = this;\n        this.robotIpCookieName = \"RobotIP\";\n        this.robotIP = null;\n        this.show = function () {\n            BootstrapDialog.show({\n                title: \"Settings\",\n                message: $(\"<div></div>\").load(\"settings.html\"),\n                closable: true,\n                closeByBackdrop: true,\n                closeByKeyboard: true,\n                data: {},\n                onshow: function (dialogRef) {\n                },\n                onshown: function (dialogRef) {\n                    $(\"#robotIP\").val(_this.getRobotIp());\n                    $(\"#shutdownButton\").click(_this.executeShutdown);\n                    $(\"#rebootButton\").click(_this.executeReboot);\n                    $(\"#stopButton\").click(_this.executeStop);\n                },\n                buttons: [\n                    {\n                        label: \"Close\",\n                        action: function (dialogItself) {\n                            dialogItself.close();\n                        }\n                    }\n                ],\n                onhide: function (dialogRef) {\n                    _this.robotIP = $(\"#robotIP\").val();\n                    _this.storeRobotIp();\n                }\n            });\n        };\n        this.getBaseServerUrl = function () {\n            return \"http://\" + _this.getRobotIp();\n        };\n        this.getBaseAPIUrl = function () {\n            return \"http://\" + _this.getRobotIp() + \":80/ropi/api/v1.0/\";\n        };\n        this.getCameraUrl = function () {\n            return _this.getBaseServerUrl() + \":8080/stream/video.mjpeg\";\n        };\n    }\n    Settings.prototype.getRobotIp = function () {\n        if (!this.checkRobotIp(this.robotIP)) {\n            this.robotIP = Cookies.get(this.robotIpCookieName);\n            if (!this.checkRobotIp(this.robotIP)) {\n                this.robotIP = window.location.hostname;\n                if (!this.checkRobotIp(this.robotIP)) {\n                    this.robotIP = \"raspberrypi\";\n                }\n            }\n        }\n        return this.robotIP;\n    };\n    Settings.prototype.storeRobotIp = function () {\n        Cookies.set(this.robotIpCookieName, this.robotIP);\n    };\n    Settings.prototype.checkRobotIp = function (ip) {\n        return ip != null && ip !== \"\" && ip !== \"undefined\";\n    };\n    Settings.prototype.executeShutdown = function () {\n        BootstrapDialog.confirm({\n            title: \"WARNING\",\n            message: \"You are about to shutdown the Robot.\\r\\n You won't be able to reach it anymore (power on required)\",\n            type: BootstrapDialog.TYPE_DANGER,\n            btnOKLabel: \"Yes, shutdown!\",\n            btnOKClass: \"btn-danger\",\n            callback: function (result) {\n                if (result) {\n                    RequestsHelper.Current.put(\"system/shutdown\");\n                }\n            }\n        });\n    };\n    Settings.prototype.executeReboot = function () {\n        BootstrapDialog.confirm({\n            title: \"WARNING\",\n            message: \"You are about to reboot the Robot.\\r\\n Please wait few minutes then reconnect to the Robot.\",\n            type: BootstrapDialog.TYPE_WARNING,\n            btnOKLabel: \"Yes, reboot!\",\n            btnOKClass: \"btn-warning\",\n            callback: function (result) {\n                if (result) {\n                    RequestsHelper.Current.put(\"system/reboot\");\n                }\n            }\n        });\n    };\n    Settings.prototype.executeStop = function () {\n        BootstrapDialog.confirm({\n            title: \"WARNING\",\n            message: \"You are about to stop the server running on the Robot.\\r\\n You won't be able to reach it anymore (hard reset required)\",\n            type: BootstrapDialog.TYPE_DANGER,\n            btnOKLabel: \"Yes, stop it!\",\n            btnOKClass: \"btn-danger\",\n            callback: function (result) {\n                if (result) {\n                    RequestsHelper.Current.put(\"quit\");\n                }\n            }\n        });\n    };\n    Settings.Current = new Settings();\n    return Settings;\n}());\n\n},{}]},{},[1])(1)\n});\n\n"],"sourceRoot":"/source/"}