{"version":3,"sources":["node_modules/browser-pack/_prelude.js","source/js/application.min.js","application.min.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","application","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"$","document","ready","Application","run","CameraControl","_this","socketio","robotIpEntry","cameraButton","connectButton","cameraControlsButton","cameraControlsOff","cameraControlsJoystick","cameraControlsSteppedJoystick","robotControls","RobotControls","cameraControls","CameraControls","init","bootstrapToggle","change","processToggleCamera","processRobotToggle","click","selectMode","FollowMeJoystick","SteppedJoystick","disableControlsButton","settingsButton","Settings","Current","show","Dashboard","getInstance","getToggleStatus","toggle","prop","getIsConnected","getIsCameraActive","getIsControlsActive","hide","enableControlsButton","connect","io","getBaseServerUrl","forceNew","on","msg","text","title","hideIcon","DashboardIcons","Engine","modifySpeed","hasOwnProperty","setLogoUrl","logoUrl","parkingControl","update","showIcon","emit","disconnect","processToggleControls","startCamera","stopCamera","startEngine","stopEngine","joystickRight","currentTilt","currentPan","step","isBusy","currentCameraControls","sendCameraCommand","command","console","log","RequestsHelper","put","processResult","data","pan","tilt","adjustTilt","offset","adjustPan","prototype","cameraControl","currentDistance","currentInterval","currentDirection","currentPanPercent","currentTiltPercent","joystickSize","distanceMax","Math","floor","centerX","centerY","steppedStart","nipplejs","create","maxNumberOfNipples","zone","getElementById","size","mode","position","left","top","color","evt","type","x","y","clearInterval","direction","panPercent","tiltPercent","angle","destroy","Parking","dummyVoltageValue","tempWarningLimit","canvas","fabric","StaticCanvas","zoomFactor","originalWidth","originalHeight","isCameraVisible","cruiseControlSpeed","isMoving","setBackgroundColor","setHeight","setWidth","clockController","DashboardClockController","iconsController","DashboardIconsController","drawMiddleDisplay","drawCameraAndGauges","setInterval","isVisible","updateTime","cameraInterval","renderAll","onresize","resizeCanvas","tempInterval","callback","showAllIcons","leftGauge","setValue","rightGauge","miniGaugeLeft","miniGaugeRight","setTimeout","hideAllIcons","turnOn","ParkingSensors","Headlights","ParkingBrake","SeatBelt","showClockOrLogo","turnOff","setValueAnimated","voltageText","setText","setCruiseControlSpeed","speed","needMove","setThreshold","move","Tempomat","stop","TurnSignals","icon","img","onload","hideLogo","hideClock","cameraImage","setElement","width","height","onerror","src","getCameraUrl","memPercent","cpuPercent","cpuTemp","WaterTemperature","logo","remove","logoImage","Image","fromURL","image","ar","add","showClock","drawGauges","drawLeftGauge","steelseries","Radial","gaugeType","GaugeType","TYPE3","minValue","maxValue","ledVisible","foregroundType","ForegroundType","frameDesign","FrameDesign","TILTED_BLACK","knobStyle","KnobStyle","SILVER","pointerType","PointerType","TYPE9","lcdDecimals","threshold","tickLabelOrientation","TickLabelOrientation","HORIZONTAL","section","area","titleString","unitString","lcdVisible","useOdometer","odometerParams","digits","backgroundColor","BackgroundColor","CARBON","leftGaugeImage","Text","fontSize","textAlign","fontFamily","fill","Linear","TYPE1","backgroundVisible","frameVisible","thresholdVisible","niceScale","foregroundVisible","miniGaugeLeftImage","miniGaugeRightImage","drawRightGauge","RadialBargraph","TYPE2","fractionalScaleDecimals","useValueGradient","rightGaugeImage","degreesSymbol","Line","stroke","strokeWidth","zoomIt","factor","getHeight","getWidth","backgroundImage","bi","objects","getObjects","scaleX","scaleY","top_1","tempScaleX","tempScaleY","tempLeft","tempTop","setCoords","calcOffset","clientWidth","innerWidth","instance","visible","clockGaugeImage","Clock","TYPE4","secondPointerVisible","BRUSHED_STAINLESS","value","TYPE5","today","Date","h","checkTime","getHours","m","getMinutes","clockText","icons","target","undefined","id","path","FrontAssist","LaneAssist","loadSVGFromURL","result","PathGroup","iconPath","colorOff","color1","color2","color3","color4","colorLeftLine","colorRightLine","isOff","circle1","circle2","circle3","circle4","right","lineLeft","lineRight","dist","miniDisplay","d","drawMiniDisplay","startAngle","endAngle","allowTouchScrolling","setZoom","Circle","radius","selectable","body","Rect","wleft","wright","Group","lockScalingX","lockScalingY","lockScalingFlip","hasBorders","hasControls","miniDisplayImage","DisplaySingle","valuesNumeric","unitStringVisible","callbackSuccess","callbackError","ajax","url","getBaseAPIUrl","success","error","joystickLeft","accButton","brakeButton","currentSpeed","showDirectionJoystick","currentDirectionAngle","distance","degree","robotIpCookieName","robotIP","BootstrapDialog","message","load","closable","closeByBackdrop","closeByKeyboard","onshow","dialogRef","onshown","val","getRobotIp","executeShutdown","executeReboot","executeStop","buttons","label","action","dialogItself","close","onhide","storeRobotIp","checkRobotIp","Cookies","get","location","hostname","set","ip","confirm","TYPE_DANGER","btnOKLabel","btnOKClass","TYPE_WARNING"],"mappings":"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","file":"application.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","$(document).ready(function () {\n    new Application().run();\n});\nvar Application = (function () {\n    function Application() {\n        var _this = this;\n        this.socketio = null;\n        this.robotIpEntry = null;\n        this.cameraButton = null;\n        this.connectButton = null;\n        this.cameraControlsButton = null;\n        this.cameraControlsOff = null;\n        this.cameraControlsJoystick = null;\n        this.cameraControlsSteppedJoystick = null;\n        this.robotControls = new RobotControls();\n        this.cameraControls = new CameraControls();\n        this.run = function () {\n            _this.robotControls.init();\n            _this.cameraControls.init();\n            _this.cameraButton = $(\"#cameraButton\");\n            _this.cameraButton.bootstrapToggle();\n            _this.cameraButton.change(function () {\n                _this.processToggleCamera();\n            });\n            _this.connectButton = $(\"#connectButton\");\n            _this.connectButton.bootstrapToggle();\n            _this.connectButton.change(function () {\n                _this.processRobotToggle();\n            });\n            _this.cameraControlsButton = $(\"#controlsButtonOptions\");\n            _this.cameraControlsJoystick = $(\"#controlsJoystick\").click(function () {\n                _this.cameraControls.selectMode(CameraControl.FollowMeJoystick);\n            });\n            _this.cameraControlsSteppedJoystick = $(\"#controlsSteppedJoystick\").click(function () {\n                _this.cameraControls.selectMode(CameraControl.SteppedJoystick);\n            });\n            _this.disableControlsButton();\n            var settingsButton = $(\"#settingsButton\");\n            settingsButton.click(function () {\n                Settings.Current.show();\n            });\n            Dashboard.getInstance().show();\n        };\n        this.getToggleStatus = function (toggle) { return (toggle != null && toggle.prop(\"checked\")); };\n        this.getIsConnected = function () { return _this.getToggleStatus(_this.connectButton); };\n        this.getIsCameraActive = function () { return _this.getToggleStatus(_this.cameraButton); };\n        this.getIsControlsActive = function () { return true; };\n        this.disableControlsButton = function () {\n            _this.cameraControls.hide();\n            _this.cameraControlsButton.prop(\"disabled\", true);\n        };\n        this.enableControlsButton = function () {\n            _this.cameraControlsButton.prop(\"disabled\", false);\n            _this.cameraControls.show();\n        };\n        this.connect = function () {\n            _this.socketio = io.connect(Settings.Current.getBaseServerUrl() + \":80/\", { 'forceNew': true });\n            _this.socketio.on(\"connected\", function (msg) {\n                $(\"#badge\").text(msg.title);\n                Dashboard.getInstance().hideIcon(DashboardIcons.Engine);\n                _this.robotControls.modifySpeed(0);\n                if (msg.hasOwnProperty(\"logoUrl\")) {\n                    Dashboard.getInstance().setLogoUrl(msg.logoUrl);\n                }\n            });\n            _this.socketio.on(\"disconnected\", function (msg) {\n                $(\"#badge\").text('offline');\n                _this.connectButton.bootstrapToggle(\"off\");\n                _this.cameraButton.bootstrapToggle(\"off\");\n            });\n            _this.socketio.on(\"parking\", function (msg) {\n                Dashboard.getInstance().parkingControl.update(msg);\n            });\n            _this.socketio.on(\"sysinfo\", function (msg) {\n                Dashboard.getInstance().update(msg);\n            });\n            _this.socketio.on(\"error\", function (msg) {\n                Dashboard.getInstance().showIcon(DashboardIcons.Engine);\n            });\n            _this.socketio.on(\"reconnect_error\", function (msg) {\n                Dashboard.getInstance().showIcon(DashboardIcons.Engine);\n            });\n            _this.socketio.emit(\"connect\");\n        };\n        this.disconnect = function () {\n            if (_this.socketio !== null) {\n                _this.socketio.disconnect();\n            }\n        };\n        this.processToggleControls = function () {\n            if (!_this.getIsCameraActive())\n                return;\n        };\n        this.processToggleCamera = function () {\n            if (_this.getIsCameraActive()) {\n                Dashboard.getInstance().startCamera();\n                _this.enableControlsButton();\n            }\n            else {\n                Dashboard.getInstance().stopCamera();\n                if (!_this.getIsConnected()) {\n                    _this.cameraControls.hide();\n                    _this.disableControlsButton();\n                }\n            }\n        };\n        this.processRobotToggle = function () {\n            if (_this.getIsConnected()) {\n                Dashboard.getInstance().startEngine(function () {\n                    _this.connect();\n                    _this.robotControls.show();\n                    if (!_this.getIsCameraActive()) {\n                        _this.cameraButton.bootstrapToggle(\"toggle\");\n                    }\n                    _this.enableControlsButton();\n                });\n            }\n            else {\n                Dashboard.getInstance().stopEngine(function () {\n                    $(\"#badge\").text('offline');\n                    _this.robotControls.hide();\n                    _this.disconnect();\n                    if (!_this.getIsCameraActive()) {\n                        _this.disableControlsButton();\n                        _this.cameraControls.hide();\n                    }\n                });\n            }\n        };\n    }\n    return Application;\n}());\nvar CameraControl;\n(function (CameraControl) {\n    CameraControl[CameraControl[\"SteppedJoystick\"] = 0] = \"SteppedJoystick\";\n    CameraControl[CameraControl[\"FollowMeJoystick\"] = 1] = \"FollowMeJoystick\";\n})(CameraControl || (CameraControl = {}));\nvar CameraControls = (function () {\n    function CameraControls() {\n        var _this = this;\n        this.joystickRight = null;\n        this.currentTilt = 95;\n        this.currentPan = 90;\n        this.step = 10;\n        this.isBusy = false;\n        this.currentCameraControls = CameraControl.SteppedJoystick;\n        this.sendCameraCommand = function (command) {\n            if (_this.isBusy && command !== \"center\") {\n                console.log(\"Skipped request...\");\n                return;\n            }\n            _this.isBusy = true;\n            RequestsHelper.Current.put(\"servos/\" + command, _this.processResult, function () { return _this.isBusy = false; });\n        };\n        this.processResult = function (data) {\n            var pan = data[\"pan\"];\n            var tilt = data[\"tilt\"];\n            if (pan != null && pan !== -1) {\n                _this.currentPan = pan;\n            }\n            if (tilt != null && tilt !== -1) {\n                _this.currentTilt = data[\"tilt\"];\n            }\n            _this.isBusy = false;\n        };\n        this.adjustTilt = function (offset) { return (_this.currentTilt + offset); };\n        this.adjustPan = function (offset) { return (_this.currentPan + offset); };\n    }\n    CameraControls.prototype.init = function () {\n    };\n    CameraControls.prototype.selectMode = function (cameraControl) {\n        this.currentCameraControls = cameraControl;\n    };\n    CameraControls.prototype.show = function () {\n        var _this = this;\n        var currentDirection = null;\n        var currentDistance;\n        var currentPanPercent = 0;\n        var currentTiltPercent = 0;\n        var joystickSize = 120;\n        var distanceMax = Math.floor(joystickSize / 2);\n        var centerX = 0;\n        var centerY = 0;\n        var currentInterval;\n        var steppedStart = false;\n        this.hide();\n        this.currentCameraControls = CameraControl.SteppedJoystick;\n        if (this.joystickRight != null)\n            return;\n        this.joystickRight = nipplejs.create({\n            maxNumberOfNipples: 1,\n            zone: document.getElementById(\"jRight\"),\n            size: joystickSize,\n            mode: \"dynamic\",\n            position: { left: \"50%\", top: \"50%\" },\n            color: \"blue\"\n        }).on(\"start end\", function (evt, data) {\n            if (_this.currentCameraControls === CameraControl.FollowMeJoystick) {\n                if (evt.type === \"start\") {\n                    centerX = data.position.x;\n                    centerY = data.position.y;\n                    console.log(\"centerX:\" + centerX + \"  centerY:\" + centerY);\n                }\n                else {\n                    centerX = 0;\n                    centerY = 0;\n                    _this.sendCameraCommand(\"center\");\n                }\n                currentDirection = null;\n                currentDistance = 0;\n            }\n            else if (_this.currentCameraControls === CameraControl.SteppedJoystick) {\n                clearInterval(currentInterval);\n                if (evt.type === \"start\") {\n                    steppedStart = true;\n                }\n                else {\n                    _this.sendCameraCommand(\"move/stop\");\n                    if (steppedStart) {\n                        steppedStart = false;\n                        _this.sendCameraCommand(\"center\");\n                    }\n                }\n            }\n        }).on(\"move\", function (evt, data) {\n            if (_this.currentCameraControls === CameraControl.FollowMeJoystick) {\n                if (data == null || data.direction === null || data.position === null)\n                    return;\n                var panPercent = -Math.floor(((data.position.x - centerX) / distanceMax) * 100);\n                var tiltPercent = Math.floor(((data.position.y - centerY) / distanceMax) * 100);\n                if (panPercent > 100 || panPercent < -100 || tiltPercent > 100 || tiltPercent < -100) {\n                    return;\n                }\n                if (panPercent % 2 === 0 || tiltPercent % 2 === 0) {\n                    if (currentPanPercent !== panPercent || currentTiltPercent !== tiltPercent) {\n                        currentPanPercent = panPercent;\n                        currentTiltPercent = tiltPercent;\n                        _this.sendCameraCommand(\"percent/\" + panPercent + \"/\" + tiltPercent);\n                    }\n                }\n            }\n        }).on(\"dir\", function (evt, data) {\n            if (_this.currentCameraControls === CameraControl.SteppedJoystick) {\n                steppedStart = false;\n                var direction = data.direction.angle;\n                console.log(direction);\n                if (currentDirection === direction) {\n                    return;\n                }\n                currentDirection = direction;\n                _this.sendCameraCommand(\"move/\" + currentDirection);\n            }\n        });\n    };\n    CameraControls.prototype.hide = function () {\n        if (this.joystickRight != null) {\n            this.joystickRight.destroy();\n            this.joystickRight = null;\n        }\n        this.currentCameraControls = CameraControl.SteppedJoystick;\n    };\n    return CameraControls;\n}());\nvar Dashboard = (function () {\n    function Dashboard() {\n        var _this = this;\n        this.parkingControl = new Parking();\n        this.dummyVoltageValue = \"22.5 °C\";\n        this.tempWarningLimit = 60;\n        this.logoUrl = null;\n        this.canvas = new fabric.StaticCanvas(\"dashboard\");\n        this.zoomFactor = 1;\n        this.originalWidth = 1408;\n        this.originalHeight = 513;\n        this.isCameraVisible = false;\n        this.cruiseControlSpeed = 0;\n        this.isMoving = false;\n        this.show = function () {\n            _this.canvas.setBackgroundColor(\"black\", function () { });\n            _this.canvas.setHeight(_this.originalHeight);\n            _this.canvas.setWidth(_this.originalWidth);\n            _this.clockController = new DashboardClockController(_this.canvas);\n            _this.iconsController = new DashboardIconsController(_this.canvas);\n            _this.parkingControl.iconsController = _this.iconsController;\n            _this.drawMiddleDisplay();\n            _this.drawCameraAndGauges();\n            setInterval(function () {\n                if (_this.clockController.isVisible()) {\n                    _this.clockController.updateTime();\n                    if (_this.cameraInterval == null) {\n                        _this.canvas.renderAll();\n                    }\n                }\n            }, 1000);\n            window.onresize = _this.resizeCanvas;\n            _this.tempInterval = setInterval(function () {\n                clearInterval(_this.tempInterval);\n                _this.resizeCanvas();\n            }, 500);\n        };\n        this.startEngine = function (callback) {\n            _this.iconsController.showAllIcons();\n            _this.leftGauge.setValue(100);\n            _this.rightGauge.setValue(90);\n            _this.miniGaugeLeft.setValue(100);\n            _this.miniGaugeRight.setValue(100);\n            setTimeout(function () {\n                _this.iconsController.hideAllIcons();\n                _this.leftGauge.setValue(0);\n                _this.rightGauge.setValue(0);\n                _this.miniGaugeLeft.setValue(0);\n                _this.miniGaugeRight.setValue(0);\n                _this.parkingControl.turnOn();\n                _this.showIcon(DashboardIcons.ParkingSensors);\n                _this.showIcon(DashboardIcons.Headlights);\n                _this.showIcon(DashboardIcons.ParkingBrake);\n                _this.showIcon(DashboardIcons.SeatBelt);\n                if (callback != null) {\n                    callback();\n                }\n            }, 1500);\n        };\n        this.stopEngine = function (callback) {\n            _this.setLogoUrl(null);\n            _this.showClockOrLogo();\n            _this.parkingControl.turnOff();\n            _this.miniGaugeLeft.setValue(0);\n            _this.miniGaugeRight.setValue(0);\n            _this.rightGauge.setValueAnimated(0);\n            _this.iconsController.hideAllIcons();\n            _this.voltageText.setText(_this.dummyVoltageValue);\n            if (callback != null) {\n                callback();\n            }\n        };\n        this.setCruiseControlSpeed = function (speed) {\n            if (_this.leftGauge != null) {\n                var needMove = false;\n                if (_this.cruiseControlSpeed !== speed && _this.isMoving) {\n                    needMove = true;\n                }\n                _this.cruiseControlSpeed = speed;\n                _this.leftGauge.setThreshold(_this.cruiseControlSpeed);\n                if (needMove) {\n                    _this.move();\n                }\n            }\n            if (_this.cruiseControlSpeed === 0) {\n                _this.hideIcon(DashboardIcons.Tempomat);\n            }\n            else {\n                _this.showIcon(DashboardIcons.Tempomat);\n            }\n        };\n        this.move = function () {\n            if (_this.leftGauge != null && _this.cruiseControlSpeed != null && !_this.isMoving) {\n                _this.hideIcon(DashboardIcons.ParkingBrake);\n                _this.isMoving = true;\n                _this.leftGauge.setValueAnimated(_this.cruiseControlSpeed);\n            }\n        };\n        this.stop = function () {\n            if (_this.leftGauge != null) {\n                _this.isMoving = false;\n                _this.leftGauge.setValueAnimated(0);\n                _this.showIcon(DashboardIcons.ParkingBrake);\n                _this.hideIcon(DashboardIcons.TurnSignals);\n            }\n        };\n        this.showIcon = function (icon) {\n            _this.iconsController.showIcon(icon);\n        };\n        this.hideIcon = function (icon) {\n            _this.iconsController.hideIcon(icon);\n        };\n        this.startCamera = function () {\n            var img = document.getElementById(\"camera\");\n            img.onload = function () {\n                _this.hideLogo();\n                _this.hideClock();\n                _this.cameraImage.setElement(img);\n                _this.cameraImage.width = 500;\n                _this.cameraImage.height = 375;\n            };\n            img.onerror = function () {\n                _this.showClockOrLogo();\n            };\n            img.src = Settings.Current.getCameraUrl();\n            _this.cameraInterval = setInterval(function () {\n                _this.canvas.renderAll();\n            }, 250);\n        };\n        this.stopCamera = function () {\n            if (_this.cameraInterval != null) {\n                clearInterval(_this.cameraInterval);\n                _this.cameraInterval = null;\n            }\n            var img = document.getElementById(\"camera\");\n            img.onerror = function () {\n                _this.showClockOrLogo();\n            };\n            img.src = \"http://\";\n        };\n        this.update = function (msg) {\n            if (_this.canvas != null) {\n                var memPercent = msg[\"mp\"];\n                var cpuPercent = msg[\"cp\"];\n                var cpuTemp = msg[\"ct\"];\n                _this.rightGauge.setValueAnimated(cpuTemp);\n                _this.miniGaugeLeft.setValue(cpuPercent);\n                _this.miniGaugeRight.setValue(memPercent);\n                if (cpuTemp > _this.tempWarningLimit) {\n                    _this.iconsController.showIcon(DashboardIcons.WaterTemperature);\n                }\n                else {\n                    _this.iconsController.hideIcon(DashboardIcons.WaterTemperature);\n                }\n                if (msg[\"v\"] !== \"0\") {\n                    _this.voltageText.setText(msg[\"v\"] + \" V\");\n                }\n                else {\n                    _this.voltageText.setText(_this.dummyVoltageValue);\n                }\n            }\n        };\n        this.setLogoUrl = function (logo) {\n            _this.logoUrl = logo;\n        };\n        this.hideLogo = function () {\n            _this.canvas.remove(_this.logoImage);\n            _this.canvas.renderAll();\n        };\n        this.hideClock = function () {\n            _this.clockController.hideClock();\n        };\n        this.showClockOrLogo = function () {\n            _this.clockController.hideClock();\n            if (_this.logoUrl !== null) {\n                fabric.Image.fromURL(_this.logoUrl, function (image) {\n                    _this.logoImage = image;\n                    var ar = image.height / image.width;\n                    image.width = 200 * _this.zoomFactor;\n                    image.left = 705 * _this.zoomFactor - image.width / 2;\n                    image.height = image.width * ar;\n                    image.top = 220 * _this.zoomFactor - image.height / 2;\n                    _this.canvas.add(image);\n                    _this.canvas.renderAll();\n                });\n            }\n            else {\n                _this.hideLogo();\n                _this.clockController.showClock();\n            }\n        };\n        this.drawCameraAndGauges = function () {\n            fabric.Image.fromURL(\"http://\", function (image) {\n                _this.cameraImage = image;\n                var ar = image.height / image.width;\n                image.left = 455;\n                image.top = 60;\n                _this.canvas.add(image);\n                _this.drawGauges();\n            });\n            _this.showClockOrLogo();\n        };\n        this.drawLeftGauge = function () {\n            _this.leftGauge = new steelseries.Radial(\"gLeft\", {\n                gaugeType: steelseries.GaugeType.TYPE3,\n                minValue: 0,\n                maxValue: 100,\n                size: 510,\n                ledVisible: false,\n                foregroundType: steelseries.ForegroundType.TYPE3,\n                frameDesign: steelseries.FrameDesign.TILTED_BLACK,\n                knobStyle: steelseries.KnobStyle.SILVER,\n                pointerType: steelseries.PointerType.TYPE9,\n                lcdDecimals: 0,\n                threshold: 0,\n                tickLabelOrientation: steelseries.TickLabelOrientation.HORIZONTAL,\n                section: null,\n                area: null,\n                titleString: \"Speed\",\n                unitString: \"%\",\n                lcdVisible: true,\n                useOdometer: true,\n                odometerParams: { digits: 5 },\n                backgroundColor: steelseries.BackgroundColor.CARBON\n            });\n            var leftGaugeImage = new fabric.Image(document.getElementById(\"gLeft\"), {\n                left: 0,\n                top: 0,\n                width: 510,\n                height: 510\n            });\n            _this.canvas.add(leftGaugeImage);\n            _this.voltageText = new fabric.Text(_this.dummyVoltageValue, {\n                fontSize: 28,\n                textAlign: \"center\",\n                left: 890,\n                top: 25,\n                fontFamily: \"Arial\",\n                fill: \"white\"\n            });\n            _this.canvas.add(_this.voltageText);\n            _this.miniGaugeLeft = new steelseries.Linear(\"gMiniLeft\", {\n                gaugeType: steelseries.GaugeType.TYPE1,\n                backgroundVisible: false,\n                frameVisible: false,\n                minValue: 0,\n                maxValue: 100,\n                ledVisible: false,\n                thresholdVisible: false,\n                lcdVisible: false,\n                niceScale: false,\n                foregroundVisible: false,\n            });\n            var miniGaugeLeftImage = new fabric.Image(document.getElementById(\"gMiniLeft\"), {\n                left: 405,\n                top: 400,\n                width: 340,\n                height: 80\n            });\n            _this.canvas.add(miniGaugeLeftImage);\n            _this.miniGaugeRight = new steelseries.Linear(\"gMiniRight\", {\n                gaugeType: steelseries.GaugeType.TYPE1,\n                backgroundVisible: false,\n                frameVisible: false,\n                minValue: 0,\n                maxValue: 100,\n                ledVisible: false,\n                lcdVisible: false,\n                niceScale: true,\n                thresholdVisible: false,\n                foregroundVisible: false,\n            });\n            var miniGaugeRightImage = new fabric.Image(document.getElementById(\"gMiniRight\"), {\n                left: 660,\n                top: 400,\n                width: 340,\n                height: 80\n            });\n            _this.canvas.add(miniGaugeRightImage);\n        };\n        this.drawRightGauge = function () {\n            _this.rightGauge = new steelseries.RadialBargraph(\"gRight\", {\n                gaugeType: steelseries.GaugeType.TYPE2,\n                minValue: 10,\n                maxValue: 90,\n                size: 510,\n                tickLabelOrientation: steelseries.TickLabelOrientation.HORIZONTAL,\n                foregroundType: steelseries.ForegroundType.TYPE3,\n                frameDesign: steelseries.FrameDesign.TILTED_BLACK,\n                ledVisible: false,\n                niceScale: false,\n                fractionalScaleDecimals: false,\n                useValueGradient: true,\n                section: null,\n                area: null,\n                lcdVisible: false,\n                backgroundColor: steelseries.BackgroundColor.CARBON\n            });\n            var rightGaugeImage = new fabric.Image(document.getElementById(\"gRight\"), {\n                left: 898,\n                top: 0,\n                width: 510,\n                height: 510\n            });\n            _this.canvas.add(rightGaugeImage);\n            var degreesSymbol = new fabric.Text(\"°C\", {\n                fontSize: 28,\n                textAlign: \"center\",\n                left: 1317,\n                top: 270,\n                fontFamily: \"Arial\",\n                fill: \"white\"\n            });\n            _this.canvas.add(degreesSymbol);\n        };\n        this.drawGauges = function () {\n            _this.drawLeftGauge();\n            _this.drawRightGauge();\n            _this.parkingControl.init(_this.canvas);\n        };\n        this.drawMiddleDisplay = function () {\n            _this.canvas.add(new fabric.Line([400, 59, 1000, 59], {\n                stroke: \"gray\",\n                strokeWidth: 2\n            }));\n            _this.canvas.add(new fabric.Line([400, 436, 1000, 436], {\n                stroke: \"gray\",\n                strokeWidth: 2\n            }));\n        };\n        this.zoomIt = function (factor) {\n            _this.canvas.setHeight(_this.canvas.getHeight() * factor);\n            _this.canvas.setWidth(_this.canvas.getWidth() * factor);\n            if (_this.canvas.backgroundImage) {\n                var bi = _this.canvas.backgroundImage;\n                bi.width = bi.width * factor;\n                bi.height = bi.height * factor;\n            }\n            var objects = _this.canvas.getObjects();\n            for (var i in objects) {\n                var scaleX = objects[i].scaleX;\n                var scaleY = objects[i].scaleY;\n                var left = objects[i].left;\n                var top_1 = objects[i].top;\n                var tempScaleX = scaleX * factor;\n                var tempScaleY = scaleY * factor;\n                var tempLeft = left * factor;\n                var tempTop = top_1 * factor;\n                objects[i].scaleX = tempScaleX;\n                objects[i].scaleY = tempScaleY;\n                objects[i].left = tempLeft;\n                objects[i].top = tempTop;\n                objects[i].setCoords();\n            }\n            _this.canvas.renderAll();\n            _this.canvas.calcOffset();\n        };\n        this.resizeCanvas = function () {\n            var clientWidth = window.innerWidth;\n            _this.zoomFactor = clientWidth / _this.canvas.getWidth();\n            _this.zoomIt(_this.zoomFactor);\n        };\n        if (Dashboard.instance) {\n            throw new Error(\"Error - use Dashboard.getInstance()\");\n        }\n    }\n    Dashboard.getInstance = function () {\n        Dashboard.instance = Dashboard.instance || new Dashboard();\n        return Dashboard.instance;\n    };\n    return Dashboard;\n}());\nvar DashboardClockController = (function () {\n    function DashboardClockController(canvas) {\n        var _this = this;\n        this.isVisible = function () {\n            return _this.visible;\n        };\n        this.hideClock = function () {\n            _this.canvas.remove(_this.clockGaugeImage);\n            _this.canvas.renderAll();\n            _this.visible = false;\n        };\n        this.showClock = function () {\n            _this.hideClock();\n            new steelseries.Clock(\"gClock\", {\n                gaugeType: steelseries.GaugeType.TYPE4,\n                size: 170,\n                secondPointerVisible: true,\n                backgroundVisible: true,\n                backgroundColor: steelseries.BackgroundColor.BRUSHED_STAINLESS,\n                frameVisible: false,\n                frameDesign: steelseries.FrameDesign.TILTED_BLACK,\n                minValue: 20,\n                maxValue: 80,\n                value: 45,\n                niceScale: true,\n                pointerType: steelseries.PointerType.TYPE5,\n            });\n            var factor = Dashboard.getInstance().zoomFactor;\n            _this.clockGaugeImage = new fabric.Image(document.getElementById(\"gClock\"), {\n                left: 579 * factor,\n                top: 120 * factor,\n                width: 250 * factor,\n                height: 250 * factor\n            });\n            _this.canvas.add(_this.clockGaugeImage);\n            _this.canvas.renderAll();\n            _this.visible = true;\n        };\n        this.updateTime = function () {\n            var today = new Date();\n            var h = _this.checkTime(today.getHours());\n            var m = _this.checkTime(today.getMinutes());\n            _this.clockText.setText(h + \":\" + m);\n        };\n        this.checkTime = function (i) {\n            if (i < 10) {\n                i = \"0\" + i;\n            }\n            ;\n            return i;\n        };\n        this.canvas = canvas;\n        this.clockText = new fabric.Text(\"21:45\", {\n            fontSize: 28,\n            textAlign: \"center\",\n            left: 420,\n            top: 25,\n            fontFamily: \"Arial\",\n            fill: \"white\"\n        });\n        this.canvas.add(this.clockText);\n        this.updateTime();\n    }\n    return DashboardClockController;\n}());\nvar DashboardIcons;\n(function (DashboardIcons) {\n    DashboardIcons[DashboardIcons[\"SeatBelt\"] = 0] = \"SeatBelt\";\n    DashboardIcons[DashboardIcons[\"Tempomat\"] = 1] = \"Tempomat\";\n    DashboardIcons[DashboardIcons[\"FrontAssist\"] = 2] = \"FrontAssist\";\n    DashboardIcons[DashboardIcons[\"Engine\"] = 3] = \"Engine\";\n    DashboardIcons[DashboardIcons[\"Headlights\"] = 4] = \"Headlights\";\n    DashboardIcons[DashboardIcons[\"LaneAssist\"] = 5] = \"LaneAssist\";\n    DashboardIcons[DashboardIcons[\"ParkingBrake\"] = 6] = \"ParkingBrake\";\n    DashboardIcons[DashboardIcons[\"ParkingSensors\"] = 7] = \"ParkingSensors\";\n    DashboardIcons[DashboardIcons[\"WaterTemperature\"] = 8] = \"WaterTemperature\";\n    DashboardIcons[DashboardIcons[\"TurnSignals\"] = 9] = \"TurnSignals\";\n})(DashboardIcons || (DashboardIcons = {}));\nvar DashboardIconsController = (function () {\n    function DashboardIconsController(canvas) {\n        this.icons = {};\n        this.canvas = canvas;\n    }\n    DashboardIconsController.prototype.showIcon = function (target) {\n        var _this = this;\n        var icon = this.icons[target];\n        if (icon != undefined && icon.isVisible) {\n            return;\n        }\n        else {\n            this.icons[target] = { id: target, isVisible: true };\n        }\n        var path = null;\n        var left = -1;\n        var top = -1;\n        switch (target) {\n            case DashboardIcons.Engine:\n                path = \"/images/Engine.svg\";\n                left = 675;\n                top = 445;\n                break;\n            case DashboardIcons.FrontAssist:\n                path = \"/images/Frontassist.svg\";\n                left = 1230;\n                top = 300;\n                break;\n            case DashboardIcons.Headlights:\n                path = \"/images/Headlights.svg\";\n                left = 615;\n                top = 10;\n                break;\n            case DashboardIcons.LaneAssist:\n                path = \"/images/Laneassist.svg\";\n                left = 525;\n                top = 445;\n                break;\n            case DashboardIcons.ParkingBrake:\n                path = \"/images/Parkingbrake.svg\";\n                left = 840;\n                top = 445;\n                break;\n            case DashboardIcons.ParkingSensors:\n                path = \"/images/Parkingsensors.svg\";\n                left = 1030;\n                top = 300;\n                break;\n            case DashboardIcons.SeatBelt:\n                path = \"/images/Seatbelt.svg\";\n                left = 900;\n                top = 445;\n                break;\n            case DashboardIcons.Tempomat:\n                path = \"/images/Tempomat.svg\";\n                left = 465;\n                top = 445;\n                break;\n            case DashboardIcons.TurnSignals:\n                path = \"/images/Turnsignal.svg\";\n                left = 675;\n                top = 10;\n                break;\n            case DashboardIcons.WaterTemperature:\n                path = \"/images/Temperature.svg\";\n                left = 960;\n                top = 280;\n                break;\n        }\n        if (path !== null && left !== -1 && top !== -1) {\n            fabric.loadSVGFromURL(path, function (objects) {\n                var factor = Dashboard.getInstance().zoomFactor;\n                var result = new fabric.PathGroup(objects, {\n                    left: left * factor,\n                    top: top * factor\n                });\n                result.scaleX = 0.7 * factor;\n                result.scaleY = 0.7 * factor;\n                _this.canvas.add(result);\n                _this.icons[target] = { id: target, iconPath: result, isVisible: true };\n            });\n        }\n    };\n    DashboardIconsController.prototype.hideIcon = function (target) {\n        var icon = this.icons[target];\n        if (icon != undefined && icon.isVisible) {\n            icon.isVisible = false;\n            this.canvas.remove(icon.iconPath);\n            icon.iconPath = null;\n        }\n    };\n    DashboardIconsController.prototype.showAllIcons = function () {\n        this.showIcon(DashboardIcons.Engine);\n        this.showIcon(DashboardIcons.FrontAssist);\n        this.showIcon(DashboardIcons.Headlights);\n        this.showIcon(DashboardIcons.LaneAssist);\n        this.showIcon(DashboardIcons.ParkingBrake);\n        this.showIcon(DashboardIcons.ParkingSensors);\n        this.showIcon(DashboardIcons.SeatBelt);\n        this.showIcon(DashboardIcons.Tempomat);\n        this.showIcon(DashboardIcons.TurnSignals);\n        this.showIcon(DashboardIcons.WaterTemperature);\n    };\n    DashboardIconsController.prototype.hideAllIcons = function () {\n        this.hideIcon(DashboardIcons.Engine);\n        this.hideIcon(DashboardIcons.FrontAssist);\n        this.hideIcon(DashboardIcons.Headlights);\n        this.hideIcon(DashboardIcons.LaneAssist);\n        this.hideIcon(DashboardIcons.ParkingBrake);\n        this.hideIcon(DashboardIcons.ParkingSensors);\n        this.hideIcon(DashboardIcons.SeatBelt);\n        this.hideIcon(DashboardIcons.Tempomat);\n        this.hideIcon(DashboardIcons.TurnSignals);\n        this.hideIcon(DashboardIcons.WaterTemperature);\n    };\n    return DashboardIconsController;\n}());\nvar Parking = (function () {\n    function Parking() {\n        var _this = this;\n        this.colorOff = \"lightGray\";\n        this.color1 = \"yellow\";\n        this.color2 = \"orange\";\n        this.color3 = \"orangered\";\n        this.color4 = \"red\";\n        this.colorLeftLine = \"red\";\n        this.colorRightLine = \"green\";\n        this.isOff = true;\n        this.circle1 = null;\n        this.circle2 = null;\n        this.circle3 = null;\n        this.circle4 = null;\n        this.left = null;\n        this.right = null;\n        this.lineLeft = null;\n        this.lineRight = null;\n        this.update = function (msg) {\n            if (_this.canvas != null) {\n                _this.circle1.stroke = _this.colorOff;\n                _this.circle2.stroke = _this.colorOff;\n                _this.circle3.stroke = _this.colorOff;\n                _this.circle4.stroke = _this.colorOff;\n                _this.left.stroke = _this.colorOff;\n                _this.right.stroke = _this.colorOff;\n                _this.lineLeft.fill = _this.colorOff;\n                _this.lineRight.fill = _this.colorOff;\n                var dist = msg[\"d\"];\n                if (!_this.isOff) {\n                    _this.miniDisplay.setValue(dist);\n                }\n                if (dist < 50 && dist >= 30) {\n                    _this.circle1.stroke = _this.color1;\n                }\n                if (dist < 30 && dist >= 20) {\n                    _this.circle2.stroke = _this.color2;\n                }\n                if (dist < 20 && dist >= 10) {\n                    _this.circle3.stroke = _this.color3;\n                }\n                if (dist < 10 || msg[\"c\"]) {\n                    _this.circle4.stroke = _this.color4;\n                }\n                if (msg[\"l\"]) {\n                    _this.left.stroke = _this.color4;\n                }\n                if (msg[\"r\"]) {\n                    _this.right.stroke = _this.color4;\n                }\n                if (msg[\"ll\"]) {\n                    _this.lineLeft.fill = _this.colorLeftLine;\n                }\n                if (msg[\"rl\"]) {\n                    _this.lineRight.fill = _this.colorRightLine;\n                }\n                if (msg[\"fa\"]) {\n                    _this.iconsController.showIcon(DashboardIcons.FrontAssist);\n                }\n                else {\n                    _this.iconsController.hideIcon(DashboardIcons.FrontAssist);\n                }\n                _this.canvas.renderAll();\n            }\n        };\n        this.turnOff = function () {\n            _this.isOff = true;\n            _this.update({ \"d\": 10000 });\n            _this.drawMiniDisplay();\n        };\n        this.turnOn = function () {\n            _this.isOff = false;\n            _this.drawMiniDisplay();\n        };\n        this.init = function (canvas) {\n            var startAngle = -2.618;\n            var endAngle = -0.5235;\n            startAngle = -2.35619;\n            endAngle = -0.785398;\n            _this.canvas = canvas;\n            _this.canvas.allowTouchScrolling = false;\n            _this.canvas.setZoom(1);\n            _this.circle1 = new fabric.Circle({\n                radius: 100,\n                left: -10,\n                top: 20,\n                angle: 0,\n                startAngle: startAngle,\n                endAngle: endAngle,\n                stroke: _this.colorOff,\n                strokeWidth: 17,\n                fill: \"\",\n                selectable: false\n            });\n            _this.circle2 = new fabric.Circle({\n                radius: 80,\n                left: 10,\n                top: 40,\n                angle: 0,\n                startAngle: startAngle,\n                endAngle: endAngle,\n                stroke: _this.colorOff,\n                strokeWidth: 17,\n                fill: \"\",\n                selectable: false\n            });\n            _this.circle3 = new fabric.Circle({\n                radius: 60,\n                left: 30,\n                top: 60,\n                angle: 0,\n                startAngle: startAngle,\n                endAngle: endAngle,\n                stroke: _this.colorOff,\n                strokeWidth: 17,\n                fill: \"\",\n                selectable: false\n            });\n            _this.circle4 = new fabric.Circle({\n                radius: 40,\n                left: 50,\n                top: 80,\n                angle: 0,\n                startAngle: startAngle,\n                endAngle: endAngle,\n                stroke: _this.colorOff,\n                strokeWidth: 17,\n                fill: \"\",\n                selectable: false\n            });\n            _this.left = new fabric.Circle({\n                radius: 40,\n                left: 50,\n                top: 80,\n                angle: 0,\n                startAngle: startAngle - 0.8,\n                endAngle: endAngle - 1.65,\n                stroke: _this.colorOff,\n                strokeWidth: 17,\n                fill: \"\",\n                selectable: false\n            });\n            _this.right = new fabric.Circle({\n                radius: 40,\n                left: 50,\n                top: 80,\n                angle: 0,\n                startAngle: startAngle + 1.65,\n                endAngle: endAngle + 0.8,\n                stroke: _this.colorOff,\n                strokeWidth: 17,\n                fill: \"\",\n                selectable: false\n            });\n            var body = new fabric.Rect({\n                top: 115,\n                left: 73,\n                width: 50,\n                height: 100,\n                fill: \"gray\",\n                selectable: false\n            });\n            var wleft = new fabric.Rect({\n                top: 180,\n                left: 45,\n                width: 25,\n                height: 50,\n                fill: \"dimgray\",\n                selectable: false\n            });\n            var wright = new fabric.Rect({\n                top: 180,\n                left: 126,\n                width: 25,\n                height: 50,\n                fill: \"dimgray\",\n                selectable: false\n            });\n            _this.lineLeft = new fabric.Rect({\n                top: 130,\n                left: 80,\n                width: 10,\n                height: 20,\n                fill: _this.colorOff,\n                selectable: false\n            });\n            _this.lineRight = new fabric.Rect({\n                top: 130,\n                left: 106,\n                width: 10,\n                height: 20,\n                fill: _this.colorOff,\n                selectable: false\n            });\n            var parkingControl = new fabric.Group([\n                _this.circle1, _this.circle2, _this.circle3, _this.circle4, _this.left, _this.right,\n                body, wleft, wright, _this.lineLeft, _this.lineRight\n            ], {\n                left: 1078,\n                top: 140,\n                width: 150,\n                scaleX: 1,\n                scaleY: 1,\n                lockScalingX: true,\n                lockScalingY: true,\n                lockScalingFlip: true,\n                hasBorders: false,\n                hasControls: false\n            });\n            _this.canvas.add(parkingControl);\n            _this.drawMiniDisplay();\n        };\n        this.drawMiniDisplay = function () {\n            if (_this.miniDisplayImage != null) {\n                _this.canvas.remove(_this.miniDisplayImage);\n            }\n            if (_this.isOff) {\n                _this.miniDisplay = new steelseries.DisplaySingle(\"gMini\", {\n                    width: 160,\n                    height: 60,\n                    valuesNumeric: false,\n                    value: \"off \",\n                    lcdDecimals: 0\n                });\n            }\n            else {\n                _this.miniDisplay = new steelseries.DisplaySingle(\"gMini\", {\n                    width: 160,\n                    height: 60,\n                    unitString: \"cm\",\n                    lcdDecimals: 0,\n                    unitStringVisible: true\n                });\n            }\n            var factor = Dashboard.getInstance().zoomFactor;\n            _this.miniDisplayImage = new fabric.Image(document.getElementById(\"gMini\"), {\n                left: 1073 * factor,\n                top: 360 * factor,\n                width: 160 * factor,\n                height: 60 * factor\n            });\n            _this.canvas.add(_this.miniDisplayImage);\n        };\n    }\n    return Parking;\n}());\n;\nvar RequestsHelper = (function () {\n    function RequestsHelper() {\n    }\n    RequestsHelper.prototype.put = function (command, callbackSuccess, callbackError) {\n        if (callbackSuccess === void 0) { callbackSuccess = null; }\n        if (callbackError === void 0) { callbackError = null; }\n        $.ajax({\n            url: Settings.Current.getBaseAPIUrl() + command,\n            type: \"PUT\",\n            success: function (result) {\n                console.log(command);\n                if (callbackSuccess != null) {\n                    callbackSuccess(result);\n                }\n            },\n            error: function (result) {\n                console.log(result + command);\n                if (callbackError != null) {\n                    callbackError(result);\n                }\n            }\n        });\n    };\n    RequestsHelper.Current = new RequestsHelper();\n    return RequestsHelper;\n}());\nvar RobotControls = (function () {\n    function RobotControls() {\n        var _this = this;\n        this.joystickLeft = null;\n        this.accButton = null;\n        this.brakeButton = null;\n        this.currentSpeed = 40;\n        this.showDirectionJoystick = function () {\n            if (_this.joystickLeft != null)\n                return;\n            var currentDirectionAngle = 0;\n            Dashboard.getInstance().setCruiseControlSpeed(_this.currentSpeed);\n            _this.joystickLeft = nipplejs.create({\n                maxNumberOfNipples: 1,\n                zone: document.getElementById(\"jLeft\"),\n                mode: \"dynamic\",\n                size: 120,\n                position: { left: \"50%\", top: \"50%\" },\n                color: \"green\"\n            }).on(\"start end\", function (evt, data) {\n                if (evt.type === \"end\") {\n                    RequestsHelper.Current.put(\"motor/stop\");\n                    Dashboard.getInstance().stop();\n                }\n            }).on(\"move\", function (evt, data) {\n                var dist = data.distance;\n                if (dist > 10) {\n                    var angle = Math.floor(data.angle.degree / 10) * 10;\n                    if (angle !== currentDirectionAngle) {\n                        RequestsHelper.Current.put(\"motor/move/\" + angle);\n                        currentDirectionAngle = angle;\n                        Dashboard.getInstance().move();\n                        if ((angle > 100 && angle < 260) || angle < 80 || angle > 280) {\n                            Dashboard.getInstance().showIcon(DashboardIcons.TurnSignals);\n                        }\n                        else {\n                            Dashboard.getInstance().hideIcon(DashboardIcons.TurnSignals);\n                        }\n                    }\n                }\n            });\n        };\n    }\n    RobotControls.prototype.init = function () {\n        var _this = this;\n        this.accButton = $(\"#accButton\");\n        this.accButton.click(function () {\n            _this.modifySpeed(+10);\n        });\n        this.brakeButton = $(\"#brakeButton\");\n        this.brakeButton.click(function () {\n            _this.modifySpeed(-10);\n        });\n    };\n    RobotControls.prototype.show = function () {\n        this.showDirectionJoystick();\n        this.accButton.show();\n        this.brakeButton.show();\n    };\n    RobotControls.prototype.hide = function () {\n        if (this.joystickLeft != null) {\n            this.joystickLeft.destroy();\n            this.joystickLeft = null;\n        }\n        if (this.accButton != null) {\n            this.accButton.hide();\n        }\n        if (this.brakeButton != null) {\n            this.brakeButton.hide();\n        }\n    };\n    RobotControls.prototype.modifySpeed = function (speed) {\n        var _this = this;\n        RequestsHelper.Current.put(\"motor/speed/\" + (this.currentSpeed + speed), function (data) {\n            _this.currentSpeed = data[\"speed\"];\n            Dashboard.getInstance().setCruiseControlSpeed(_this.currentSpeed);\n        });\n    };\n    return RobotControls;\n}());\nvar Settings = (function () {\n    function Settings() {\n        var _this = this;\n        this.robotIpCookieName = \"RobotIP\";\n        this.robotIP = null;\n        this.show = function () {\n            BootstrapDialog.show({\n                title: \"Settings\",\n                message: $(\"<div></div>\").load(\"settings.html\"),\n                closable: true,\n                closeByBackdrop: true,\n                closeByKeyboard: true,\n                data: {},\n                onshow: function (dialogRef) {\n                },\n                onshown: function (dialogRef) {\n                    $(\"#robotIP\").val(_this.getRobotIp());\n                    $(\"#shutdownButton\").click(_this.executeShutdown);\n                    $(\"#rebootButton\").click(_this.executeReboot);\n                    $(\"#stopButton\").click(_this.executeStop);\n                },\n                buttons: [\n                    {\n                        label: \"Close\",\n                        action: function (dialogItself) {\n                            dialogItself.close();\n                        }\n                    }\n                ],\n                onhide: function (dialogRef) {\n                    _this.robotIP = $(\"#robotIP\").val();\n                    _this.storeRobotIp();\n                }\n            });\n        };\n        this.getBaseServerUrl = function () {\n            return \"http://\" + _this.getRobotIp();\n        };\n        this.getBaseAPIUrl = function () {\n            return \"http://\" + _this.getRobotIp() + \":80/ropi/api/v1.0/\";\n        };\n        this.getCameraUrl = function () {\n            return _this.getBaseServerUrl() + \":8080/stream/video.mjpeg\";\n        };\n    }\n    Settings.prototype.getRobotIp = function () {\n        if (!this.checkRobotIp(this.robotIP)) {\n            this.robotIP = Cookies.get(this.robotIpCookieName);\n            if (!this.checkRobotIp(this.robotIP)) {\n                this.robotIP = window.location.hostname;\n                if (!this.checkRobotIp(this.robotIP)) {\n                    this.robotIP = \"raspberrypi\";\n                }\n            }\n        }\n        return this.robotIP;\n    };\n    Settings.prototype.storeRobotIp = function () {\n        Cookies.set(this.robotIpCookieName, this.robotIP);\n    };\n    Settings.prototype.checkRobotIp = function (ip) {\n        return ip != null && ip !== \"\" && ip !== \"undefined\";\n    };\n    Settings.prototype.executeShutdown = function () {\n        BootstrapDialog.confirm({\n            title: \"WARNING\",\n            message: \"You are about to shutdown the Robot.\\r\\n You won't be able to reach it anymore (power on required)\",\n            type: BootstrapDialog.TYPE_DANGER,\n            btnOKLabel: \"Yes, shutdown!\",\n            btnOKClass: \"btn-danger\",\n            callback: function (result) {\n                if (result) {\n                    RequestsHelper.Current.put(\"system/shutdown\");\n                }\n            }\n        });\n    };\n    Settings.prototype.executeReboot = function () {\n        BootstrapDialog.confirm({\n            title: \"WARNING\",\n            message: \"You are about to reboot the Robot.\\r\\n Please wait few minutes then reconnect to the Robot.\",\n            type: BootstrapDialog.TYPE_WARNING,\n            btnOKLabel: \"Yes, reboot!\",\n            btnOKClass: \"btn-warning\",\n            callback: function (result) {\n                if (result) {\n                    RequestsHelper.Current.put(\"system/reboot\");\n                }\n            }\n        });\n    };\n    Settings.prototype.executeStop = function () {\n        BootstrapDialog.confirm({\n            title: \"WARNING\",\n            message: \"You are about to stop the server running on the Robot.\\r\\n You won't be able to reach it anymore (hard reset required)\",\n            type: BootstrapDialog.TYPE_DANGER,\n            btnOKLabel: \"Yes, stop it!\",\n            btnOKClass: \"btn-danger\",\n            callback: function (result) {\n                if (result) {\n                    RequestsHelper.Current.put(\"quit\");\n                }\n            }\n        });\n    };\n    Settings.Current = new Settings();\n    return Settings;\n}());\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.application = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n$(document).ready(function () {\n    new Application().run();\n});\nvar Application = (function () {\n    function Application() {\n        var _this = this;\n        this.socketio = null;\n        this.robotIpEntry = null;\n        this.cameraButton = null;\n        this.connectButton = null;\n        this.cameraControlsButton = null;\n        this.cameraControlsOff = null;\n        this.cameraControlsJoystick = null;\n        this.cameraControlsSteppedJoystick = null;\n        this.robotControls = new RobotControls();\n        this.cameraControls = new CameraControls();\n        this.run = function () {\n            _this.robotControls.init();\n            _this.cameraControls.init();\n            _this.cameraButton = $(\"#cameraButton\");\n            _this.cameraButton.bootstrapToggle();\n            _this.cameraButton.change(function () {\n                _this.processToggleCamera();\n            });\n            _this.connectButton = $(\"#connectButton\");\n            _this.connectButton.bootstrapToggle();\n            _this.connectButton.change(function () {\n                _this.processRobotToggle();\n            });\n            _this.cameraControlsButton = $(\"#controlsButtonOptions\");\n            _this.cameraControlsJoystick = $(\"#controlsJoystick\").click(function () {\n                _this.cameraControls.selectMode(CameraControl.FollowMeJoystick);\n            });\n            _this.cameraControlsSteppedJoystick = $(\"#controlsSteppedJoystick\").click(function () {\n                _this.cameraControls.selectMode(CameraControl.SteppedJoystick);\n            });\n            _this.disableControlsButton();\n            var settingsButton = $(\"#settingsButton\");\n            settingsButton.click(function () {\n                Settings.Current.show();\n            });\n            Dashboard.getInstance().show();\n        };\n        this.getToggleStatus = function (toggle) { return (toggle != null && toggle.prop(\"checked\")); };\n        this.getIsConnected = function () { return _this.getToggleStatus(_this.connectButton); };\n        this.getIsCameraActive = function () { return _this.getToggleStatus(_this.cameraButton); };\n        this.getIsControlsActive = function () { return true; };\n        this.disableControlsButton = function () {\n            _this.cameraControls.hide();\n            _this.cameraControlsButton.prop(\"disabled\", true);\n        };\n        this.enableControlsButton = function () {\n            _this.cameraControlsButton.prop(\"disabled\", false);\n            _this.cameraControls.show();\n        };\n        this.connect = function () {\n            _this.socketio = io.connect(Settings.Current.getBaseServerUrl() + \":80/\", { 'forceNew': true });\n            _this.socketio.on(\"connected\", function (msg) {\n                $(\"#badge\").text(msg.title);\n                Dashboard.getInstance().hideIcon(DashboardIcons.Engine);\n                _this.robotControls.modifySpeed(0);\n                if (msg.hasOwnProperty(\"logoUrl\")) {\n                    Dashboard.getInstance().setLogoUrl(msg.logoUrl);\n                }\n            });\n            _this.socketio.on(\"disconnected\", function (msg) {\n                $(\"#badge\").text('offline');\n                _this.connectButton.bootstrapToggle(\"off\");\n                _this.cameraButton.bootstrapToggle(\"off\");\n            });\n            _this.socketio.on(\"parking\", function (msg) {\n                Dashboard.getInstance().parkingControl.update(msg);\n            });\n            _this.socketio.on(\"sysinfo\", function (msg) {\n                Dashboard.getInstance().update(msg);\n            });\n            _this.socketio.on(\"error\", function (msg) {\n                Dashboard.getInstance().showIcon(DashboardIcons.Engine);\n            });\n            _this.socketio.on(\"reconnect_error\", function (msg) {\n                Dashboard.getInstance().showIcon(DashboardIcons.Engine);\n            });\n            _this.socketio.emit(\"connect\");\n        };\n        this.disconnect = function () {\n            if (_this.socketio !== null) {\n                _this.socketio.disconnect();\n            }\n        };\n        this.processToggleControls = function () {\n            if (!_this.getIsCameraActive())\n                return;\n        };\n        this.processToggleCamera = function () {\n            if (_this.getIsCameraActive()) {\n                Dashboard.getInstance().startCamera();\n                _this.enableControlsButton();\n            }\n            else {\n                Dashboard.getInstance().stopCamera();\n                if (!_this.getIsConnected()) {\n                    _this.cameraControls.hide();\n                    _this.disableControlsButton();\n                }\n            }\n        };\n        this.processRobotToggle = function () {\n            if (_this.getIsConnected()) {\n                Dashboard.getInstance().startEngine(function () {\n                    _this.connect();\n                    _this.robotControls.show();\n                    if (!_this.getIsCameraActive()) {\n                        _this.cameraButton.bootstrapToggle(\"toggle\");\n                    }\n                    _this.enableControlsButton();\n                });\n            }\n            else {\n                Dashboard.getInstance().stopEngine(function () {\n                    $(\"#badge\").text('offline');\n                    _this.robotControls.hide();\n                    _this.disconnect();\n                    if (!_this.getIsCameraActive()) {\n                        _this.disableControlsButton();\n                        _this.cameraControls.hide();\n                    }\n                });\n            }\n        };\n    }\n    return Application;\n}());\nvar CameraControl;\n(function (CameraControl) {\n    CameraControl[CameraControl[\"SteppedJoystick\"] = 0] = \"SteppedJoystick\";\n    CameraControl[CameraControl[\"FollowMeJoystick\"] = 1] = \"FollowMeJoystick\";\n})(CameraControl || (CameraControl = {}));\nvar CameraControls = (function () {\n    function CameraControls() {\n        var _this = this;\n        this.joystickRight = null;\n        this.currentTilt = 95;\n        this.currentPan = 90;\n        this.step = 10;\n        this.isBusy = false;\n        this.currentCameraControls = CameraControl.SteppedJoystick;\n        this.sendCameraCommand = function (command) {\n            if (_this.isBusy && command !== \"center\") {\n                console.log(\"Skipped request...\");\n                return;\n            }\n            _this.isBusy = true;\n            RequestsHelper.Current.put(\"servos/\" + command, _this.processResult, function () { return _this.isBusy = false; });\n        };\n        this.processResult = function (data) {\n            var pan = data[\"pan\"];\n            var tilt = data[\"tilt\"];\n            if (pan != null && pan !== -1) {\n                _this.currentPan = pan;\n            }\n            if (tilt != null && tilt !== -1) {\n                _this.currentTilt = data[\"tilt\"];\n            }\n            _this.isBusy = false;\n        };\n        this.adjustTilt = function (offset) { return (_this.currentTilt + offset); };\n        this.adjustPan = function (offset) { return (_this.currentPan + offset); };\n    }\n    CameraControls.prototype.init = function () {\n    };\n    CameraControls.prototype.selectMode = function (cameraControl) {\n        this.currentCameraControls = cameraControl;\n    };\n    CameraControls.prototype.show = function () {\n        var _this = this;\n        var currentDirection = null;\n        var currentDistance;\n        var currentPanPercent = 0;\n        var currentTiltPercent = 0;\n        var joystickSize = 120;\n        var distanceMax = Math.floor(joystickSize / 2);\n        var centerX = 0;\n        var centerY = 0;\n        var currentInterval;\n        var steppedStart = false;\n        this.hide();\n        this.currentCameraControls = CameraControl.SteppedJoystick;\n        if (this.joystickRight != null)\n            return;\n        this.joystickRight = nipplejs.create({\n            maxNumberOfNipples: 1,\n            zone: document.getElementById(\"jRight\"),\n            size: joystickSize,\n            mode: \"dynamic\",\n            position: { left: \"50%\", top: \"50%\" },\n            color: \"blue\"\n        }).on(\"start end\", function (evt, data) {\n            if (_this.currentCameraControls === CameraControl.FollowMeJoystick) {\n                if (evt.type === \"start\") {\n                    centerX = data.position.x;\n                    centerY = data.position.y;\n                    console.log(\"centerX:\" + centerX + \"  centerY:\" + centerY);\n                }\n                else {\n                    centerX = 0;\n                    centerY = 0;\n                    _this.sendCameraCommand(\"center\");\n                }\n                currentDirection = null;\n                currentDistance = 0;\n            }\n            else if (_this.currentCameraControls === CameraControl.SteppedJoystick) {\n                clearInterval(currentInterval);\n                if (evt.type === \"start\") {\n                    steppedStart = true;\n                }\n                else {\n                    _this.sendCameraCommand(\"move/stop\");\n                    if (steppedStart) {\n                        steppedStart = false;\n                        _this.sendCameraCommand(\"center\");\n                    }\n                }\n            }\n        }).on(\"move\", function (evt, data) {\n            if (_this.currentCameraControls === CameraControl.FollowMeJoystick) {\n                if (data == null || data.direction === null || data.position === null)\n                    return;\n                var panPercent = -Math.floor(((data.position.x - centerX) / distanceMax) * 100);\n                var tiltPercent = Math.floor(((data.position.y - centerY) / distanceMax) * 100);\n                if (panPercent > 100 || panPercent < -100 || tiltPercent > 100 || tiltPercent < -100) {\n                    return;\n                }\n                if (panPercent % 2 === 0 || tiltPercent % 2 === 0) {\n                    if (currentPanPercent !== panPercent || currentTiltPercent !== tiltPercent) {\n                        currentPanPercent = panPercent;\n                        currentTiltPercent = tiltPercent;\n                        _this.sendCameraCommand(\"percent/\" + panPercent + \"/\" + tiltPercent);\n                    }\n                }\n            }\n        }).on(\"dir\", function (evt, data) {\n            if (_this.currentCameraControls === CameraControl.SteppedJoystick) {\n                steppedStart = false;\n                var direction = data.direction.angle;\n                console.log(direction);\n                if (currentDirection === direction) {\n                    return;\n                }\n                currentDirection = direction;\n                _this.sendCameraCommand(\"move/\" + currentDirection);\n            }\n        });\n    };\n    CameraControls.prototype.hide = function () {\n        if (this.joystickRight != null) {\n            this.joystickRight.destroy();\n            this.joystickRight = null;\n        }\n        this.currentCameraControls = CameraControl.SteppedJoystick;\n    };\n    return CameraControls;\n}());\nvar Dashboard = (function () {\n    function Dashboard() {\n        var _this = this;\n        this.parkingControl = new Parking();\n        this.dummyVoltageValue = \"22.5 °C\";\n        this.tempWarningLimit = 60;\n        this.logoUrl = null;\n        this.canvas = new fabric.StaticCanvas(\"dashboard\");\n        this.zoomFactor = 1;\n        this.originalWidth = 1408;\n        this.originalHeight = 513;\n        this.isCameraVisible = false;\n        this.cruiseControlSpeed = 0;\n        this.isMoving = false;\n        this.show = function () {\n            _this.canvas.setBackgroundColor(\"black\", function () { });\n            _this.canvas.setHeight(_this.originalHeight);\n            _this.canvas.setWidth(_this.originalWidth);\n            _this.clockController = new DashboardClockController(_this.canvas);\n            _this.iconsController = new DashboardIconsController(_this.canvas);\n            _this.parkingControl.iconsController = _this.iconsController;\n            _this.drawMiddleDisplay();\n            _this.drawCameraAndGauges();\n            setInterval(function () {\n                if (_this.clockController.isVisible()) {\n                    _this.clockController.updateTime();\n                    if (_this.cameraInterval == null) {\n                        _this.canvas.renderAll();\n                    }\n                }\n            }, 1000);\n            window.onresize = _this.resizeCanvas;\n            _this.tempInterval = setInterval(function () {\n                clearInterval(_this.tempInterval);\n                _this.resizeCanvas();\n            }, 500);\n        };\n        this.startEngine = function (callback) {\n            _this.iconsController.showAllIcons();\n            _this.leftGauge.setValue(100);\n            _this.rightGauge.setValue(90);\n            _this.miniGaugeLeft.setValue(100);\n            _this.miniGaugeRight.setValue(100);\n            setTimeout(function () {\n                _this.iconsController.hideAllIcons();\n                _this.leftGauge.setValue(0);\n                _this.rightGauge.setValue(0);\n                _this.miniGaugeLeft.setValue(0);\n                _this.miniGaugeRight.setValue(0);\n                _this.parkingControl.turnOn();\n                _this.showIcon(DashboardIcons.ParkingSensors);\n                _this.showIcon(DashboardIcons.Headlights);\n                _this.showIcon(DashboardIcons.ParkingBrake);\n                _this.showIcon(DashboardIcons.SeatBelt);\n                if (callback != null) {\n                    callback();\n                }\n            }, 1500);\n        };\n        this.stopEngine = function (callback) {\n            _this.setLogoUrl(null);\n            _this.showClockOrLogo();\n            _this.parkingControl.turnOff();\n            _this.miniGaugeLeft.setValue(0);\n            _this.miniGaugeRight.setValue(0);\n            _this.rightGauge.setValueAnimated(0);\n            _this.iconsController.hideAllIcons();\n            _this.voltageText.setText(_this.dummyVoltageValue);\n            if (callback != null) {\n                callback();\n            }\n        };\n        this.setCruiseControlSpeed = function (speed) {\n            if (_this.leftGauge != null) {\n                var needMove = false;\n                if (_this.cruiseControlSpeed !== speed && _this.isMoving) {\n                    needMove = true;\n                }\n                _this.cruiseControlSpeed = speed;\n                _this.leftGauge.setThreshold(_this.cruiseControlSpeed);\n                if (needMove) {\n                    _this.move();\n                }\n            }\n            if (_this.cruiseControlSpeed === 0) {\n                _this.hideIcon(DashboardIcons.Tempomat);\n            }\n            else {\n                _this.showIcon(DashboardIcons.Tempomat);\n            }\n        };\n        this.move = function () {\n            if (_this.leftGauge != null && _this.cruiseControlSpeed != null && !_this.isMoving) {\n                _this.hideIcon(DashboardIcons.ParkingBrake);\n                _this.isMoving = true;\n                _this.leftGauge.setValueAnimated(_this.cruiseControlSpeed);\n            }\n        };\n        this.stop = function () {\n            if (_this.leftGauge != null) {\n                _this.isMoving = false;\n                _this.leftGauge.setValueAnimated(0);\n                _this.showIcon(DashboardIcons.ParkingBrake);\n                _this.hideIcon(DashboardIcons.TurnSignals);\n            }\n        };\n        this.showIcon = function (icon) {\n            _this.iconsController.showIcon(icon);\n        };\n        this.hideIcon = function (icon) {\n            _this.iconsController.hideIcon(icon);\n        };\n        this.startCamera = function () {\n            var img = document.getElementById(\"camera\");\n            img.onload = function () {\n                _this.hideLogo();\n                _this.hideClock();\n                _this.cameraImage.setElement(img);\n                _this.cameraImage.width = 500;\n                _this.cameraImage.height = 375;\n            };\n            img.onerror = function () {\n                _this.showClockOrLogo();\n            };\n            img.src = Settings.Current.getCameraUrl();\n            _this.cameraInterval = setInterval(function () {\n                _this.canvas.renderAll();\n            }, 250);\n        };\n        this.stopCamera = function () {\n            if (_this.cameraInterval != null) {\n                clearInterval(_this.cameraInterval);\n                _this.cameraInterval = null;\n            }\n            var img = document.getElementById(\"camera\");\n            img.onerror = function () {\n                _this.showClockOrLogo();\n            };\n            img.src = \"http://\";\n        };\n        this.update = function (msg) {\n            if (_this.canvas != null) {\n                var memPercent = msg[\"mp\"];\n                var cpuPercent = msg[\"cp\"];\n                var cpuTemp = msg[\"ct\"];\n                _this.rightGauge.setValueAnimated(cpuTemp);\n                _this.miniGaugeLeft.setValue(cpuPercent);\n                _this.miniGaugeRight.setValue(memPercent);\n                if (cpuTemp > _this.tempWarningLimit) {\n                    _this.iconsController.showIcon(DashboardIcons.WaterTemperature);\n                }\n                else {\n                    _this.iconsController.hideIcon(DashboardIcons.WaterTemperature);\n                }\n                if (msg[\"v\"] !== \"0\") {\n                    _this.voltageText.setText(msg[\"v\"] + \" V\");\n                }\n                else {\n                    _this.voltageText.setText(_this.dummyVoltageValue);\n                }\n            }\n        };\n        this.setLogoUrl = function (logo) {\n            _this.logoUrl = logo;\n        };\n        this.hideLogo = function () {\n            _this.canvas.remove(_this.logoImage);\n            _this.canvas.renderAll();\n        };\n        this.hideClock = function () {\n            _this.clockController.hideClock();\n        };\n        this.showClockOrLogo = function () {\n            _this.clockController.hideClock();\n            if (_this.logoUrl !== null) {\n                fabric.Image.fromURL(_this.logoUrl, function (image) {\n                    _this.logoImage = image;\n                    var ar = image.height / image.width;\n                    image.width = 200 * _this.zoomFactor;\n                    image.left = 705 * _this.zoomFactor - image.width / 2;\n                    image.height = image.width * ar;\n                    image.top = 220 * _this.zoomFactor - image.height / 2;\n                    _this.canvas.add(image);\n                    _this.canvas.renderAll();\n                });\n            }\n            else {\n                _this.hideLogo();\n                _this.clockController.showClock();\n            }\n        };\n        this.drawCameraAndGauges = function () {\n            fabric.Image.fromURL(\"http://\", function (image) {\n                _this.cameraImage = image;\n                var ar = image.height / image.width;\n                image.left = 455;\n                image.top = 60;\n                _this.canvas.add(image);\n                _this.drawGauges();\n            });\n            _this.showClockOrLogo();\n        };\n        this.drawLeftGauge = function () {\n            _this.leftGauge = new steelseries.Radial(\"gLeft\", {\n                gaugeType: steelseries.GaugeType.TYPE3,\n                minValue: 0,\n                maxValue: 100,\n                size: 510,\n                ledVisible: false,\n                foregroundType: steelseries.ForegroundType.TYPE3,\n                frameDesign: steelseries.FrameDesign.TILTED_BLACK,\n                knobStyle: steelseries.KnobStyle.SILVER,\n                pointerType: steelseries.PointerType.TYPE9,\n                lcdDecimals: 0,\n                threshold: 0,\n                tickLabelOrientation: steelseries.TickLabelOrientation.HORIZONTAL,\n                section: null,\n                area: null,\n                titleString: \"Speed\",\n                unitString: \"%\",\n                lcdVisible: true,\n                useOdometer: true,\n                odometerParams: { digits: 5 },\n                backgroundColor: steelseries.BackgroundColor.CARBON\n            });\n            var leftGaugeImage = new fabric.Image(document.getElementById(\"gLeft\"), {\n                left: 0,\n                top: 0,\n                width: 510,\n                height: 510\n            });\n            _this.canvas.add(leftGaugeImage);\n            _this.voltageText = new fabric.Text(_this.dummyVoltageValue, {\n                fontSize: 28,\n                textAlign: \"center\",\n                left: 890,\n                top: 25,\n                fontFamily: \"Arial\",\n                fill: \"white\"\n            });\n            _this.canvas.add(_this.voltageText);\n            _this.miniGaugeLeft = new steelseries.Linear(\"gMiniLeft\", {\n                gaugeType: steelseries.GaugeType.TYPE1,\n                backgroundVisible: false,\n                frameVisible: false,\n                minValue: 0,\n                maxValue: 100,\n                ledVisible: false,\n                thresholdVisible: false,\n                lcdVisible: false,\n                niceScale: false,\n                foregroundVisible: false,\n            });\n            var miniGaugeLeftImage = new fabric.Image(document.getElementById(\"gMiniLeft\"), {\n                left: 405,\n                top: 400,\n                width: 340,\n                height: 80\n            });\n            _this.canvas.add(miniGaugeLeftImage);\n            _this.miniGaugeRight = new steelseries.Linear(\"gMiniRight\", {\n                gaugeType: steelseries.GaugeType.TYPE1,\n                backgroundVisible: false,\n                frameVisible: false,\n                minValue: 0,\n                maxValue: 100,\n                ledVisible: false,\n                lcdVisible: false,\n                niceScale: true,\n                thresholdVisible: false,\n                foregroundVisible: false,\n            });\n            var miniGaugeRightImage = new fabric.Image(document.getElementById(\"gMiniRight\"), {\n                left: 660,\n                top: 400,\n                width: 340,\n                height: 80\n            });\n            _this.canvas.add(miniGaugeRightImage);\n        };\n        this.drawRightGauge = function () {\n            _this.rightGauge = new steelseries.RadialBargraph(\"gRight\", {\n                gaugeType: steelseries.GaugeType.TYPE2,\n                minValue: 10,\n                maxValue: 90,\n                size: 510,\n                tickLabelOrientation: steelseries.TickLabelOrientation.HORIZONTAL,\n                foregroundType: steelseries.ForegroundType.TYPE3,\n                frameDesign: steelseries.FrameDesign.TILTED_BLACK,\n                ledVisible: false,\n                niceScale: false,\n                fractionalScaleDecimals: false,\n                useValueGradient: true,\n                section: null,\n                area: null,\n                lcdVisible: false,\n                backgroundColor: steelseries.BackgroundColor.CARBON\n            });\n            var rightGaugeImage = new fabric.Image(document.getElementById(\"gRight\"), {\n                left: 898,\n                top: 0,\n                width: 510,\n                height: 510\n            });\n            _this.canvas.add(rightGaugeImage);\n            var degreesSymbol = new fabric.Text(\"°C\", {\n                fontSize: 28,\n                textAlign: \"center\",\n                left: 1317,\n                top: 270,\n                fontFamily: \"Arial\",\n                fill: \"white\"\n            });\n            _this.canvas.add(degreesSymbol);\n        };\n        this.drawGauges = function () {\n            _this.drawLeftGauge();\n            _this.drawRightGauge();\n            _this.parkingControl.init(_this.canvas);\n        };\n        this.drawMiddleDisplay = function () {\n            _this.canvas.add(new fabric.Line([400, 59, 1000, 59], {\n                stroke: \"gray\",\n                strokeWidth: 2\n            }));\n            _this.canvas.add(new fabric.Line([400, 436, 1000, 436], {\n                stroke: \"gray\",\n                strokeWidth: 2\n            }));\n        };\n        this.zoomIt = function (factor) {\n            _this.canvas.setHeight(_this.canvas.getHeight() * factor);\n            _this.canvas.setWidth(_this.canvas.getWidth() * factor);\n            if (_this.canvas.backgroundImage) {\n                var bi = _this.canvas.backgroundImage;\n                bi.width = bi.width * factor;\n                bi.height = bi.height * factor;\n            }\n            var objects = _this.canvas.getObjects();\n            for (var i in objects) {\n                var scaleX = objects[i].scaleX;\n                var scaleY = objects[i].scaleY;\n                var left = objects[i].left;\n                var top_1 = objects[i].top;\n                var tempScaleX = scaleX * factor;\n                var tempScaleY = scaleY * factor;\n                var tempLeft = left * factor;\n                var tempTop = top_1 * factor;\n                objects[i].scaleX = tempScaleX;\n                objects[i].scaleY = tempScaleY;\n                objects[i].left = tempLeft;\n                objects[i].top = tempTop;\n                objects[i].setCoords();\n            }\n            _this.canvas.renderAll();\n            _this.canvas.calcOffset();\n        };\n        this.resizeCanvas = function () {\n            var clientWidth = window.innerWidth;\n            _this.zoomFactor = clientWidth / _this.canvas.getWidth();\n            _this.zoomIt(_this.zoomFactor);\n        };\n        if (Dashboard.instance) {\n            throw new Error(\"Error - use Dashboard.getInstance()\");\n        }\n    }\n    Dashboard.getInstance = function () {\n        Dashboard.instance = Dashboard.instance || new Dashboard();\n        return Dashboard.instance;\n    };\n    return Dashboard;\n}());\nvar DashboardClockController = (function () {\n    function DashboardClockController(canvas) {\n        var _this = this;\n        this.isVisible = function () {\n            return _this.visible;\n        };\n        this.hideClock = function () {\n            _this.canvas.remove(_this.clockGaugeImage);\n            _this.canvas.renderAll();\n            _this.visible = false;\n        };\n        this.showClock = function () {\n            _this.hideClock();\n            new steelseries.Clock(\"gClock\", {\n                gaugeType: steelseries.GaugeType.TYPE4,\n                size: 170,\n                secondPointerVisible: true,\n                backgroundVisible: true,\n                backgroundColor: steelseries.BackgroundColor.BRUSHED_STAINLESS,\n                frameVisible: false,\n                frameDesign: steelseries.FrameDesign.TILTED_BLACK,\n                minValue: 20,\n                maxValue: 80,\n                value: 45,\n                niceScale: true,\n                pointerType: steelseries.PointerType.TYPE5,\n            });\n            var factor = Dashboard.getInstance().zoomFactor;\n            _this.clockGaugeImage = new fabric.Image(document.getElementById(\"gClock\"), {\n                left: 579 * factor,\n                top: 120 * factor,\n                width: 250 * factor,\n                height: 250 * factor\n            });\n            _this.canvas.add(_this.clockGaugeImage);\n            _this.canvas.renderAll();\n            _this.visible = true;\n        };\n        this.updateTime = function () {\n            var today = new Date();\n            var h = _this.checkTime(today.getHours());\n            var m = _this.checkTime(today.getMinutes());\n            _this.clockText.setText(h + \":\" + m);\n        };\n        this.checkTime = function (i) {\n            if (i < 10) {\n                i = \"0\" + i;\n            }\n            ;\n            return i;\n        };\n        this.canvas = canvas;\n        this.clockText = new fabric.Text(\"21:45\", {\n            fontSize: 28,\n            textAlign: \"center\",\n            left: 420,\n            top: 25,\n            fontFamily: \"Arial\",\n            fill: \"white\"\n        });\n        this.canvas.add(this.clockText);\n        this.updateTime();\n    }\n    return DashboardClockController;\n}());\nvar DashboardIcons;\n(function (DashboardIcons) {\n    DashboardIcons[DashboardIcons[\"SeatBelt\"] = 0] = \"SeatBelt\";\n    DashboardIcons[DashboardIcons[\"Tempomat\"] = 1] = \"Tempomat\";\n    DashboardIcons[DashboardIcons[\"FrontAssist\"] = 2] = \"FrontAssist\";\n    DashboardIcons[DashboardIcons[\"Engine\"] = 3] = \"Engine\";\n    DashboardIcons[DashboardIcons[\"Headlights\"] = 4] = \"Headlights\";\n    DashboardIcons[DashboardIcons[\"LaneAssist\"] = 5] = \"LaneAssist\";\n    DashboardIcons[DashboardIcons[\"ParkingBrake\"] = 6] = \"ParkingBrake\";\n    DashboardIcons[DashboardIcons[\"ParkingSensors\"] = 7] = \"ParkingSensors\";\n    DashboardIcons[DashboardIcons[\"WaterTemperature\"] = 8] = \"WaterTemperature\";\n    DashboardIcons[DashboardIcons[\"TurnSignals\"] = 9] = \"TurnSignals\";\n})(DashboardIcons || (DashboardIcons = {}));\nvar DashboardIconsController = (function () {\n    function DashboardIconsController(canvas) {\n        this.icons = {};\n        this.canvas = canvas;\n    }\n    DashboardIconsController.prototype.showIcon = function (target) {\n        var _this = this;\n        var icon = this.icons[target];\n        if (icon != undefined && icon.isVisible) {\n            return;\n        }\n        else {\n            this.icons[target] = { id: target, isVisible: true };\n        }\n        var path = null;\n        var left = -1;\n        var top = -1;\n        switch (target) {\n            case DashboardIcons.Engine:\n                path = \"/images/Engine.svg\";\n                left = 675;\n                top = 445;\n                break;\n            case DashboardIcons.FrontAssist:\n                path = \"/images/Frontassist.svg\";\n                left = 1230;\n                top = 300;\n                break;\n            case DashboardIcons.Headlights:\n                path = \"/images/Headlights.svg\";\n                left = 615;\n                top = 10;\n                break;\n            case DashboardIcons.LaneAssist:\n                path = \"/images/Laneassist.svg\";\n                left = 525;\n                top = 445;\n                break;\n            case DashboardIcons.ParkingBrake:\n                path = \"/images/Parkingbrake.svg\";\n                left = 840;\n                top = 445;\n                break;\n            case DashboardIcons.ParkingSensors:\n                path = \"/images/Parkingsensors.svg\";\n                left = 1030;\n                top = 300;\n                break;\n            case DashboardIcons.SeatBelt:\n                path = \"/images/Seatbelt.svg\";\n                left = 900;\n                top = 445;\n                break;\n            case DashboardIcons.Tempomat:\n                path = \"/images/Tempomat.svg\";\n                left = 465;\n                top = 445;\n                break;\n            case DashboardIcons.TurnSignals:\n                path = \"/images/Turnsignal.svg\";\n                left = 675;\n                top = 10;\n                break;\n            case DashboardIcons.WaterTemperature:\n                path = \"/images/Temperature.svg\";\n                left = 960;\n                top = 280;\n                break;\n        }\n        if (path !== null && left !== -1 && top !== -1) {\n            fabric.loadSVGFromURL(path, function (objects) {\n                var factor = Dashboard.getInstance().zoomFactor;\n                var result = new fabric.PathGroup(objects, {\n                    left: left * factor,\n                    top: top * factor\n                });\n                result.scaleX = 0.7 * factor;\n                result.scaleY = 0.7 * factor;\n                _this.canvas.add(result);\n                _this.icons[target] = { id: target, iconPath: result, isVisible: true };\n            });\n        }\n    };\n    DashboardIconsController.prototype.hideIcon = function (target) {\n        var icon = this.icons[target];\n        if (icon != undefined && icon.isVisible) {\n            icon.isVisible = false;\n            this.canvas.remove(icon.iconPath);\n            icon.iconPath = null;\n        }\n    };\n    DashboardIconsController.prototype.showAllIcons = function () {\n        this.showIcon(DashboardIcons.Engine);\n        this.showIcon(DashboardIcons.FrontAssist);\n        this.showIcon(DashboardIcons.Headlights);\n        this.showIcon(DashboardIcons.LaneAssist);\n        this.showIcon(DashboardIcons.ParkingBrake);\n        this.showIcon(DashboardIcons.ParkingSensors);\n        this.showIcon(DashboardIcons.SeatBelt);\n        this.showIcon(DashboardIcons.Tempomat);\n        this.showIcon(DashboardIcons.TurnSignals);\n        this.showIcon(DashboardIcons.WaterTemperature);\n    };\n    DashboardIconsController.prototype.hideAllIcons = function () {\n        this.hideIcon(DashboardIcons.Engine);\n        this.hideIcon(DashboardIcons.FrontAssist);\n        this.hideIcon(DashboardIcons.Headlights);\n        this.hideIcon(DashboardIcons.LaneAssist);\n        this.hideIcon(DashboardIcons.ParkingBrake);\n        this.hideIcon(DashboardIcons.ParkingSensors);\n        this.hideIcon(DashboardIcons.SeatBelt);\n        this.hideIcon(DashboardIcons.Tempomat);\n        this.hideIcon(DashboardIcons.TurnSignals);\n        this.hideIcon(DashboardIcons.WaterTemperature);\n    };\n    return DashboardIconsController;\n}());\nvar Parking = (function () {\n    function Parking() {\n        var _this = this;\n        this.colorOff = \"lightGray\";\n        this.color1 = \"yellow\";\n        this.color2 = \"orange\";\n        this.color3 = \"orangered\";\n        this.color4 = \"red\";\n        this.colorLeftLine = \"red\";\n        this.colorRightLine = \"green\";\n        this.isOff = true;\n        this.circle1 = null;\n        this.circle2 = null;\n        this.circle3 = null;\n        this.circle4 = null;\n        this.left = null;\n        this.right = null;\n        this.lineLeft = null;\n        this.lineRight = null;\n        this.update = function (msg) {\n            if (_this.canvas != null) {\n                _this.circle1.stroke = _this.colorOff;\n                _this.circle2.stroke = _this.colorOff;\n                _this.circle3.stroke = _this.colorOff;\n                _this.circle4.stroke = _this.colorOff;\n                _this.left.stroke = _this.colorOff;\n                _this.right.stroke = _this.colorOff;\n                _this.lineLeft.fill = _this.colorOff;\n                _this.lineRight.fill = _this.colorOff;\n                var dist = msg[\"d\"];\n                if (!_this.isOff) {\n                    _this.miniDisplay.setValue(dist);\n                }\n                if (dist < 50 && dist >= 30) {\n                    _this.circle1.stroke = _this.color1;\n                }\n                if (dist < 30 && dist >= 20) {\n                    _this.circle2.stroke = _this.color2;\n                }\n                if (dist < 20 && dist >= 10) {\n                    _this.circle3.stroke = _this.color3;\n                }\n                if (dist < 10 || msg[\"c\"]) {\n                    _this.circle4.stroke = _this.color4;\n                }\n                if (msg[\"l\"]) {\n                    _this.left.stroke = _this.color4;\n                }\n                if (msg[\"r\"]) {\n                    _this.right.stroke = _this.color4;\n                }\n                if (msg[\"ll\"]) {\n                    _this.lineLeft.fill = _this.colorLeftLine;\n                }\n                if (msg[\"rl\"]) {\n                    _this.lineRight.fill = _this.colorRightLine;\n                }\n                if (msg[\"fa\"]) {\n                    _this.iconsController.showIcon(DashboardIcons.FrontAssist);\n                }\n                else {\n                    _this.iconsController.hideIcon(DashboardIcons.FrontAssist);\n                }\n                _this.canvas.renderAll();\n            }\n        };\n        this.turnOff = function () {\n            _this.isOff = true;\n            _this.update({ \"d\": 10000 });\n            _this.drawMiniDisplay();\n        };\n        this.turnOn = function () {\n            _this.isOff = false;\n            _this.drawMiniDisplay();\n        };\n        this.init = function (canvas) {\n            var startAngle = -2.618;\n            var endAngle = -0.5235;\n            startAngle = -2.35619;\n            endAngle = -0.785398;\n            _this.canvas = canvas;\n            _this.canvas.allowTouchScrolling = false;\n            _this.canvas.setZoom(1);\n            _this.circle1 = new fabric.Circle({\n                radius: 100,\n                left: -10,\n                top: 20,\n                angle: 0,\n                startAngle: startAngle,\n                endAngle: endAngle,\n                stroke: _this.colorOff,\n                strokeWidth: 17,\n                fill: \"\",\n                selectable: false\n            });\n            _this.circle2 = new fabric.Circle({\n                radius: 80,\n                left: 10,\n                top: 40,\n                angle: 0,\n                startAngle: startAngle,\n                endAngle: endAngle,\n                stroke: _this.colorOff,\n                strokeWidth: 17,\n                fill: \"\",\n                selectable: false\n            });\n            _this.circle3 = new fabric.Circle({\n                radius: 60,\n                left: 30,\n                top: 60,\n                angle: 0,\n                startAngle: startAngle,\n                endAngle: endAngle,\n                stroke: _this.colorOff,\n                strokeWidth: 17,\n                fill: \"\",\n                selectable: false\n            });\n            _this.circle4 = new fabric.Circle({\n                radius: 40,\n                left: 50,\n                top: 80,\n                angle: 0,\n                startAngle: startAngle,\n                endAngle: endAngle,\n                stroke: _this.colorOff,\n                strokeWidth: 17,\n                fill: \"\",\n                selectable: false\n            });\n            _this.left = new fabric.Circle({\n                radius: 40,\n                left: 50,\n                top: 80,\n                angle: 0,\n                startAngle: startAngle - 0.8,\n                endAngle: endAngle - 1.65,\n                stroke: _this.colorOff,\n                strokeWidth: 17,\n                fill: \"\",\n                selectable: false\n            });\n            _this.right = new fabric.Circle({\n                radius: 40,\n                left: 50,\n                top: 80,\n                angle: 0,\n                startAngle: startAngle + 1.65,\n                endAngle: endAngle + 0.8,\n                stroke: _this.colorOff,\n                strokeWidth: 17,\n                fill: \"\",\n                selectable: false\n            });\n            var body = new fabric.Rect({\n                top: 115,\n                left: 73,\n                width: 50,\n                height: 100,\n                fill: \"gray\",\n                selectable: false\n            });\n            var wleft = new fabric.Rect({\n                top: 180,\n                left: 45,\n                width: 25,\n                height: 50,\n                fill: \"dimgray\",\n                selectable: false\n            });\n            var wright = new fabric.Rect({\n                top: 180,\n                left: 126,\n                width: 25,\n                height: 50,\n                fill: \"dimgray\",\n                selectable: false\n            });\n            _this.lineLeft = new fabric.Rect({\n                top: 130,\n                left: 80,\n                width: 10,\n                height: 20,\n                fill: _this.colorOff,\n                selectable: false\n            });\n            _this.lineRight = new fabric.Rect({\n                top: 130,\n                left: 106,\n                width: 10,\n                height: 20,\n                fill: _this.colorOff,\n                selectable: false\n            });\n            var parkingControl = new fabric.Group([\n                _this.circle1, _this.circle2, _this.circle3, _this.circle4, _this.left, _this.right,\n                body, wleft, wright, _this.lineLeft, _this.lineRight\n            ], {\n                left: 1078,\n                top: 140,\n                width: 150,\n                scaleX: 1,\n                scaleY: 1,\n                lockScalingX: true,\n                lockScalingY: true,\n                lockScalingFlip: true,\n                hasBorders: false,\n                hasControls: false\n            });\n            _this.canvas.add(parkingControl);\n            _this.drawMiniDisplay();\n        };\n        this.drawMiniDisplay = function () {\n            if (_this.miniDisplayImage != null) {\n                _this.canvas.remove(_this.miniDisplayImage);\n            }\n            if (_this.isOff) {\n                _this.miniDisplay = new steelseries.DisplaySingle(\"gMini\", {\n                    width: 160,\n                    height: 60,\n                    valuesNumeric: false,\n                    value: \"off \",\n                    lcdDecimals: 0\n                });\n            }\n            else {\n                _this.miniDisplay = new steelseries.DisplaySingle(\"gMini\", {\n                    width: 160,\n                    height: 60,\n                    unitString: \"cm\",\n                    lcdDecimals: 0,\n                    unitStringVisible: true\n                });\n            }\n            var factor = Dashboard.getInstance().zoomFactor;\n            _this.miniDisplayImage = new fabric.Image(document.getElementById(\"gMini\"), {\n                left: 1073 * factor,\n                top: 360 * factor,\n                width: 160 * factor,\n                height: 60 * factor\n            });\n            _this.canvas.add(_this.miniDisplayImage);\n        };\n    }\n    return Parking;\n}());\n;\nvar RequestsHelper = (function () {\n    function RequestsHelper() {\n    }\n    RequestsHelper.prototype.put = function (command, callbackSuccess, callbackError) {\n        if (callbackSuccess === void 0) { callbackSuccess = null; }\n        if (callbackError === void 0) { callbackError = null; }\n        $.ajax({\n            url: Settings.Current.getBaseAPIUrl() + command,\n            type: \"PUT\",\n            success: function (result) {\n                console.log(command);\n                if (callbackSuccess != null) {\n                    callbackSuccess(result);\n                }\n            },\n            error: function (result) {\n                console.log(result + command);\n                if (callbackError != null) {\n                    callbackError(result);\n                }\n            }\n        });\n    };\n    RequestsHelper.Current = new RequestsHelper();\n    return RequestsHelper;\n}());\nvar RobotControls = (function () {\n    function RobotControls() {\n        var _this = this;\n        this.joystickLeft = null;\n        this.accButton = null;\n        this.brakeButton = null;\n        this.currentSpeed = 40;\n        this.showDirectionJoystick = function () {\n            if (_this.joystickLeft != null)\n                return;\n            var currentDirectionAngle = 0;\n            Dashboard.getInstance().setCruiseControlSpeed(_this.currentSpeed);\n            _this.joystickLeft = nipplejs.create({\n                maxNumberOfNipples: 1,\n                zone: document.getElementById(\"jLeft\"),\n                mode: \"dynamic\",\n                size: 120,\n                position: { left: \"50%\", top: \"50%\" },\n                color: \"green\"\n            }).on(\"start end\", function (evt, data) {\n                if (evt.type === \"end\") {\n                    RequestsHelper.Current.put(\"motor/stop\");\n                    Dashboard.getInstance().stop();\n                }\n            }).on(\"move\", function (evt, data) {\n                var dist = data.distance;\n                if (dist > 10) {\n                    var angle = Math.floor(data.angle.degree / 10) * 10;\n                    if (angle !== currentDirectionAngle) {\n                        RequestsHelper.Current.put(\"motor/move/\" + angle);\n                        currentDirectionAngle = angle;\n                        Dashboard.getInstance().move();\n                        if ((angle > 100 && angle < 260) || angle < 80 || angle > 280) {\n                            Dashboard.getInstance().showIcon(DashboardIcons.TurnSignals);\n                        }\n                        else {\n                            Dashboard.getInstance().hideIcon(DashboardIcons.TurnSignals);\n                        }\n                    }\n                }\n            });\n        };\n    }\n    RobotControls.prototype.init = function () {\n        var _this = this;\n        this.accButton = $(\"#accButton\");\n        this.accButton.click(function () {\n            _this.modifySpeed(+10);\n        });\n        this.brakeButton = $(\"#brakeButton\");\n        this.brakeButton.click(function () {\n            _this.modifySpeed(-10);\n        });\n    };\n    RobotControls.prototype.show = function () {\n        this.showDirectionJoystick();\n        this.accButton.show();\n        this.brakeButton.show();\n    };\n    RobotControls.prototype.hide = function () {\n        if (this.joystickLeft != null) {\n            this.joystickLeft.destroy();\n            this.joystickLeft = null;\n        }\n        if (this.accButton != null) {\n            this.accButton.hide();\n        }\n        if (this.brakeButton != null) {\n            this.brakeButton.hide();\n        }\n    };\n    RobotControls.prototype.modifySpeed = function (speed) {\n        var _this = this;\n        RequestsHelper.Current.put(\"motor/speed/\" + (this.currentSpeed + speed), function (data) {\n            _this.currentSpeed = data[\"speed\"];\n            Dashboard.getInstance().setCruiseControlSpeed(_this.currentSpeed);\n        });\n    };\n    return RobotControls;\n}());\nvar Settings = (function () {\n    function Settings() {\n        var _this = this;\n        this.robotIpCookieName = \"RobotIP\";\n        this.robotIP = null;\n        this.show = function () {\n            BootstrapDialog.show({\n                title: \"Settings\",\n                message: $(\"<div></div>\").load(\"settings.html\"),\n                closable: true,\n                closeByBackdrop: true,\n                closeByKeyboard: true,\n                data: {},\n                onshow: function (dialogRef) {\n                },\n                onshown: function (dialogRef) {\n                    $(\"#robotIP\").val(_this.getRobotIp());\n                    $(\"#shutdownButton\").click(_this.executeShutdown);\n                    $(\"#rebootButton\").click(_this.executeReboot);\n                    $(\"#stopButton\").click(_this.executeStop);\n                },\n                buttons: [\n                    {\n                        label: \"Close\",\n                        action: function (dialogItself) {\n                            dialogItself.close();\n                        }\n                    }\n                ],\n                onhide: function (dialogRef) {\n                    _this.robotIP = $(\"#robotIP\").val();\n                    _this.storeRobotIp();\n                }\n            });\n        };\n        this.getBaseServerUrl = function () {\n            return \"http://\" + _this.getRobotIp();\n        };\n        this.getBaseAPIUrl = function () {\n            return \"http://\" + _this.getRobotIp() + \":80/ropi/api/v1.0/\";\n        };\n        this.getCameraUrl = function () {\n            return _this.getBaseServerUrl() + \":8080/stream/video.mjpeg\";\n        };\n    }\n    Settings.prototype.getRobotIp = function () {\n        if (!this.checkRobotIp(this.robotIP)) {\n            this.robotIP = Cookies.get(this.robotIpCookieName);\n            if (!this.checkRobotIp(this.robotIP)) {\n                this.robotIP = window.location.hostname;\n                if (!this.checkRobotIp(this.robotIP)) {\n                    this.robotIP = \"raspberrypi\";\n                }\n            }\n        }\n        return this.robotIP;\n    };\n    Settings.prototype.storeRobotIp = function () {\n        Cookies.set(this.robotIpCookieName, this.robotIP);\n    };\n    Settings.prototype.checkRobotIp = function (ip) {\n        return ip != null && ip !== \"\" && ip !== \"undefined\";\n    };\n    Settings.prototype.executeShutdown = function () {\n        BootstrapDialog.confirm({\n            title: \"WARNING\",\n            message: \"You are about to shutdown the Robot.\\r\\n You won't be able to reach it anymore (power on required)\",\n            type: BootstrapDialog.TYPE_DANGER,\n            btnOKLabel: \"Yes, shutdown!\",\n            btnOKClass: \"btn-danger\",\n            callback: function (result) {\n                if (result) {\n                    RequestsHelper.Current.put(\"system/shutdown\");\n                }\n            }\n        });\n    };\n    Settings.prototype.executeReboot = function () {\n        BootstrapDialog.confirm({\n            title: \"WARNING\",\n            message: \"You are about to reboot the Robot.\\r\\n Please wait few minutes then reconnect to the Robot.\",\n            type: BootstrapDialog.TYPE_WARNING,\n            btnOKLabel: \"Yes, reboot!\",\n            btnOKClass: \"btn-warning\",\n            callback: function (result) {\n                if (result) {\n                    RequestsHelper.Current.put(\"system/reboot\");\n                }\n            }\n        });\n    };\n    Settings.prototype.executeStop = function () {\n        BootstrapDialog.confirm({\n            title: \"WARNING\",\n            message: \"You are about to stop the server running on the Robot.\\r\\n You won't be able to reach it anymore (hard reset required)\",\n            type: BootstrapDialog.TYPE_DANGER,\n            btnOKLabel: \"Yes, stop it!\",\n            btnOKClass: \"btn-danger\",\n            callback: function (result) {\n                if (result) {\n                    RequestsHelper.Current.put(\"quit\");\n                }\n            }\n        });\n    };\n    Settings.Current = new Settings();\n    return Settings;\n}());\n\n},{}]},{},[1])(1)\n});\n\n"],"sourceRoot":"/source/"}